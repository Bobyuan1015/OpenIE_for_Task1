--------------------File:./data/ijcai2011.txt----------------

Sentence #1: How do we scale information extraction to the massive size and unprecedented heterogeneity of the Web corpus?
root(ROOT-0, scale-4)
advmod(scale-4, How-1)
aux(scale-4, do-2)
nsubj(scale-4, we-3)
compound(extraction-6, information-5)
dobj(scale-4, extraction-6)
case(size-10, to-7)
det(size-10, the-8)
amod(size-10, massive-9)
nmod:to(scale-4, size-10)
cc(size-10, and-11)
amod(heterogeneity-13, unprecedented-12)
nmod:to(scale-4, heterogeneity-13)
conj:and(size-10, heterogeneity-13)
case(corpus-17, of-14)
det(corpus-17, the-15)
compound(corpus-17, Web-16)
nmod:of(size-10, corpus-17)
punct(scale-4, ?-18)

root(ROOT-0, scale-4)
advmod(scale-4, How-1)
aux(scale-4, do-2)
nsubj(scale-4, we-3)
compound(extraction-6, information-5)
dobj(scale-4, extraction-6)
case(size-10, to-7)
det(size-10, the-8)
amod(size-10, massive-9)
nmod:to(scale-4, size-10)
cc(size-10, and-11)
amod(heterogeneity-13, unprecedented-12)
conj:and(size-10, heterogeneity-13)
case(corpus-17, of-14)
det(corpus-17, the-15)
compound(corpus-17, Web-16)
nmod:of(size-10, corpus-17)

root(ROOT-0, heterogeneity-13)
amod(heterogeneity-13, unprecedented-12)


Sentence #2: Beginning in 2003, our KnowItAll project has sought to extract high-quality knowledge from the Web.
root(ROOT-0, sought-9)
advcl(sought-9, Beginning-1)
case(2003-3, in-2)
nmod:in(Beginning-1, 2003-3)
punct(sought-9, ,-4)
nmod:poss(project-7, our-5)
compound(project-7, KnowItAll-6)
nsubj(sought-9, project-7)
nsubj:xsubj(extract-11, project-7)
aux(sought-9, has-8)
mark(extract-11, to-10)
xcomp(sought-9, extract-11)
amod(knowledge-13, high-quality-12)
dobj(extract-11, knowledge-13)
case(Web-16, from-14)
det(Web-16, the-15)
nmod:from(knowledge-13, Web-16)
punct(sought-9, .-17)

root(ROOT-0, sought-9)
advcl(sought-9, Beginning-1)
case(2003-3, in-2)
nmod:in(Beginning-1, 2003-3)
nmod:poss(project-7, our-5)
compound(project-7, KnowItAll-6)
nsubj(sought-9, project-7)
aux(sought-9, has-8)
mark(extract-11, to-10)
xcomp(sought-9, extract-11)
amod(knowledge-13, high-quality-12)
dobj(extract-11, knowledge-13)
case(Web-16, from-14)
det(Web-16, the-15)
nmod:from(knowledge-13, Web-16)

root(ROOT-0, extract-11)
nmod:poss(project-7, our-5)
compound(project-7, KnowItAll-6)
nsubj(extract-11, project-7)
amod(knowledge-13, high-quality-12)
dobj(extract-11, knowledge-13)
case(Web-16, from-14)
det(Web-16, the-15)
nmod:from(knowledge-13, Web-16)

root(ROOT-0, Beginning-1)
case(2003-3, in-2)
nmod:in(Beginning-1, 2003-3)
nmod:poss(project-7, our-5)
compound(project-7, KnowItAll-6)
nsubj(Beginning-1, project-7)


Sentence #3: In 2007, we introduced the Open Information Extraction (Open IE) paradigm which eschews hand-labeled training examples, and avoids domain-specific verbs and nouns, to develop unlexicalized, domain-independent extractors that scale to the Web corpus.
root(ROOT-0, introduced-5)
case(2007-2, In-1)
nmod:in(introduced-5, 2007-2)
punct(introduced-5, ,-3)
nsubj(introduced-5, we-4)
det(Extraction-9, the-6)
compound(Extraction-9, Open-7)
compound(Extraction-9, Information-8)
nsubj(paradigm-14, Extraction-9)
nsubj(avoids-22, Extraction-9)
punct(IE-12, -LRB--10)
compound(IE-12, Open-11)
appos(Extraction-9, IE-12)
punct(IE-12, -RRB--13)
ccomp(introduced-5, paradigm-14)
nsubj(eschews-16, paradigm-14)
ref(paradigm-14, which-15)
acl:relcl(paradigm-14, eschews-16)
amod(examples-19, hand-labeled-17)
compound(examples-19, training-18)
dobj(eschews-16, examples-19)
punct(paradigm-14, ,-20)
cc(paradigm-14, and-21)
ccomp(introduced-5, avoids-22)
conj:and(paradigm-14, avoids-22)
nsubj(eschews-16, avoids-22)
amod(verbs-24, domain-specific-23)
dobj(avoids-22, verbs-24)
cc(verbs-24, and-25)
dobj(avoids-22, nouns-26)
conj:and(verbs-24, nouns-26)
punct(paradigm-14, ,-27)
mark(develop-29, to-28)
advcl:to(paradigm-14, develop-29)
amod(extractors-33, unlexicalized-30)
punct(extractors-33, ,-31)
amod(extractors-33, domain-independent-32)
dobj(develop-29, extractors-33)
nsubj(scale-35, extractors-33)
ref(extractors-33, that-34)
acl:relcl(extractors-33, scale-35)
case(corpus-39, to-36)
det(corpus-39, the-37)
compound(corpus-39, Web-38)
nmod:to(scale-35, corpus-39)
punct(introduced-5, .-40)

root(ROOT-0, introduced-5)
case(2007-2, In-1)
nmod:in(introduced-5, 2007-2)
nsubj(introduced-5, we-4)
det(Extraction-9, the-6)
compound(Extraction-9, Open-7)
compound(Extraction-9, Information-8)
nsubj(paradigm-14, Extraction-9)
compound(IE-12, Open-11)
appos(Extraction-9, IE-12)
ccomp(introduced-5, paradigm-14)
ref(paradigm-14, which-15)
acl:relcl(paradigm-14, eschews-16)
amod(examples-19, hand-labeled-17)
compound(examples-19, training-18)
dobj(eschews-16, examples-19)
cc(paradigm-14, and-21)
nsubj(eschews-16, avoids-22)
amod(verbs-24, domain-specific-23)
dobj(avoids-22, verbs-24)
cc(verbs-24, and-25)
dobj(avoids-22, nouns-26)
mark(develop-29, to-28)
advcl:to(paradigm-14, develop-29)
amod(extractors-33, unlexicalized-30)
amod(extractors-33, domain-independent-32)
dobj(develop-29, extractors-33)
ref(extractors-33, that-34)
acl:relcl(extractors-33, scale-35)
case(corpus-39, to-36)
det(corpus-39, the-37)
compound(corpus-39, Web-38)
nmod:to(scale-35, corpus-39)

root(ROOT-0, paradigm-14)
det(Extraction-9, the-6)
compound(Extraction-9, Open-7)
compound(Extraction-9, Information-8)
nsubj(paradigm-14, Extraction-9)
compound(IE-12, Open-11)
appos(Extraction-9, IE-12)
ref(paradigm-14, which-15)
acl:relcl(paradigm-14, eschews-16)
amod(examples-19, hand-labeled-17)
compound(examples-19, training-18)
dobj(eschews-16, examples-19)
cc(paradigm-14, and-21)
nsubj(eschews-16, avoids-22)
amod(verbs-24, domain-specific-23)
dobj(avoids-22, verbs-24)
cc(verbs-24, and-25)
dobj(avoids-22, nouns-26)
mark(develop-29, to-28)
advcl:to(paradigm-14, develop-29)
amod(extractors-33, unlexicalized-30)
amod(extractors-33, domain-independent-32)
dobj(develop-29, extractors-33)
ref(extractors-33, that-34)
acl:relcl(extractors-33, scale-35)
case(corpus-39, to-36)
det(corpus-39, the-37)
compound(corpus-39, Web-38)
nmod:to(scale-35, corpus-39)

root(ROOT-0, develop-29)
det(Extraction-9, the-6)
compound(Extraction-9, Open-7)
compound(Extraction-9, Information-8)
nsubj(develop-29, Extraction-9)
compound(IE-12, Open-11)
appos(Extraction-9, IE-12)
amod(extractors-33, unlexicalized-30)
amod(extractors-33, domain-independent-32)
dobj(develop-29, extractors-33)
ref(extractors-33, that-34)
acl:relcl(extractors-33, scale-35)
case(corpus-39, to-36)
det(corpus-39, the-37)
compound(corpus-39, Web-38)
nmod:to(scale-35, corpus-39)

root(ROOT-0, eschews-16)
det(Extraction-9, the-6)
compound(Extraction-9, Open-7)
compound(Extraction-9, Information-8)
nsubj(paradigm-14, Extraction-9)
compound(IE-12, Open-11)
appos(Extraction-9, IE-12)
nsubj(eschews-16, paradigm-14)
ref(paradigm-14, which-15)
amod(examples-19, hand-labeled-17)
compound(examples-19, training-18)
dobj(eschews-16, examples-19)
cc(paradigm-14, and-21)
nsubj(eschews-16, avoids-22)
amod(verbs-24, domain-specific-23)
dobj(avoids-22, verbs-24)
cc(verbs-24, and-25)
dobj(avoids-22, nouns-26)
mark(develop-29, to-28)
advcl:to(paradigm-14, develop-29)
amod(extractors-33, unlexicalized-30)
amod(extractors-33, domain-independent-32)
dobj(develop-29, extractors-33)
ref(extractors-33, that-34)
acl:relcl(extractors-33, scale-35)
case(corpus-39, to-36)
det(corpus-39, the-37)
compound(corpus-39, Web-38)
nmod:to(scale-35, corpus-39)

root(ROOT-0, scale-35)
amod(extractors-33, unlexicalized-30)
amod(extractors-33, domain-independent-32)
nsubj(scale-35, extractors-33)
ref(extractors-33, that-34)
case(corpus-39, to-36)
det(corpus-39, the-37)
compound(corpus-39, Web-38)
nmod:to(scale-35, corpus-39)

root(ROOT-0, avoids-22)
det(Extraction-9, the-6)
compound(Extraction-9, Open-7)
compound(Extraction-9, Information-8)
nsubj(avoids-22, Extraction-9)
compound(IE-12, Open-11)
appos(Extraction-9, IE-12)
amod(examples-19, hand-labeled-17)
compound(examples-19, training-18)
nsubj(avoids-22, examples-19)
amod(verbs-24, domain-specific-23)
dobj(avoids-22, verbs-24)
cc(verbs-24, and-25)
dobj(avoids-22, nouns-26)

root(ROOT-0, verbs-24)
amod(verbs-24, domain-specific-23)
cc(verbs-24, and-25)
nsubj(verbs-24, nouns-26)


Sentence #4: Open IE systems have extracted billions of assertions as the basis for both common-sense knowledge and novel question-answering systems.
root(ROOT-0, extracted-5)
csubj(extracted-5, Open-1)
amod(systems-3, IE-2)
dobj(Open-1, systems-3)
aux(extracted-5, have-4)
dobj(extracted-5, billions-6)
case(assertions-8, of-7)
nmod:of(billions-6, assertions-8)
case(basis-11, as-9)
det(basis-11, the-10)
nmod:as(extracted-5, basis-11)
case(knowledge-15, for-12)
cc:preconj(knowledge-15, both-13)
amod(knowledge-15, common-sense-14)
nmod:for(basis-11, knowledge-15)
cc(knowledge-15, and-16)
amod(systems-19, novel-17)
compound(systems-19, question-answering-18)
nmod:for(basis-11, systems-19)
conj:and(knowledge-15, systems-19)
punct(extracted-5, .-20)

root(ROOT-0, extracted-5)
csubj(extracted-5, Open-1)
amod(systems-3, IE-2)
dobj(Open-1, systems-3)
aux(extracted-5, have-4)
det:qmod(assertions-8, billions-6)
mwe(billions-6, of-7)
dobj(extracted-5, assertions-8)
case(basis-11, as-9)
det(basis-11, the-10)
nmod:as(extracted-5, basis-11)
case(knowledge-15, for-12)
cc:preconj(knowledge-15, both-13)
amod(knowledge-15, common-sense-14)
nmod:for(basis-11, knowledge-15)
cc(knowledge-15, and-16)
amod(systems-19, novel-17)
compound(systems-19, question-answering-18)
conj:and(knowledge-15, systems-19)

root(ROOT-0, Open-1)
amod(systems-3, IE-2)
dobj(Open-1, systems-3)
det:qmod(assertions-8, billions-6)
mwe(billions-6, of-7)
nsubj(Open-1, assertions-8)


Sentence #5: This paper describes the second generation of Open IE systems, which rely on a novel model of how relations and their arguments are expressed in English sentences to double precision/recall compared with previous systems such as TEXTRUNNER and WOE.
root(ROOT-0, describes-3)
det(paper-2, This-1)
nsubj(describes-3, paper-2)
det(generation-6, the-4)
amod(generation-6, second-5)
dobj(describes-3, generation-6)
case(systems-10, of-7)
compound(systems-10, Open-8)
amod(systems-10, IE-9)
nmod:of(generation-6, systems-10)
nsubj(rely-13, systems-10)
punct(systems-10, ,-11)
ref(systems-10, which-12)
acl:relcl(systems-10, rely-13)
case(model-17, on-14)
det(model-17, a-15)
amod(model-17, novel-16)
nmod:on(rely-13, model-17)
mark(expressed-25, of-18)
advmod(expressed-25, how-19)
nsubjpass(expressed-25, relations-20)
nsubj:xsubj(double-30, relations-20)
cc(relations-20, and-21)
nmod:poss(arguments-23, their-22)
conj:and(relations-20, arguments-23)
nsubjpass(expressed-25, arguments-23)
nsubj:xsubj(double-30, arguments-23)
auxpass(expressed-25, are-24)
acl:of(model-17, expressed-25)
case(sentences-28, in-26)
amod(sentences-28, English-27)
nmod:in(expressed-25, sentences-28)
mark(double-30, to-29)
xcomp(expressed-25, double-30)
xcomp(double-30, precision/recall-31)
case(systems-35, compared-32)
case(systems-35, with-33)
amod(systems-35, previous-34)
advcl:with(double-30, systems-35)
case(TEXTRUNNER-38, such-36)
mwe(such-36, as-37)
nmod:such_as(systems-35, TEXTRUNNER-38)
cc(TEXTRUNNER-38, and-39)
nmod:such_as(systems-35, WOE-40)
conj:and(TEXTRUNNER-38, WOE-40)
punct(describes-3, .-41)

root(ROOT-0, describes-3)
det(paper-2, This-1)
nsubj(describes-3, paper-2)
det(generation-6, the-4)
amod(generation-6, second-5)
dobj(describes-3, generation-6)
case(systems-10, of-7)
compound(systems-10, Open-8)
amod(systems-10, IE-9)
nmod:of(generation-6, systems-10)
ref(systems-10, which-12)
acl:relcl(systems-10, rely-13)
case(model-17, on-14)
det(model-17, a-15)
amod(model-17, novel-16)
nmod:on(rely-13, model-17)
mark(expressed-25, of-18)
advmod(expressed-25, how-19)
nsubjpass(expressed-25, relations-20)
cc(relations-20, and-21)
nmod:poss(arguments-23, their-22)
nsubj:xsubj(double-30, arguments-23)
auxpass(expressed-25, are-24)
acl:of(model-17, expressed-25)
case(sentences-28, in-26)
amod(sentences-28, English-27)
nmod:in(expressed-25, sentences-28)
mark(double-30, to-29)
xcomp(expressed-25, double-30)
xcomp(double-30, precision/recall-31)
case(systems-35, compared-32)
mwe(compared-32, with-33)
amod(systems-35, previous-34)
advcl:compared_with(double-30, systems-35)
case(TEXTRUNNER-38, such-36)
mwe(such-36, as-37)
nmod:such_as(systems-35, TEXTRUNNER-38)
cc(TEXTRUNNER-38, and-39)
conj:and(TEXTRUNNER-38, WOE-40)

root(ROOT-0, rely-13)
case(systems-10, of-7)
compound(systems-10, Open-8)
amod(systems-10, IE-9)
nsubj(rely-13, systems-10)
ref(systems-10, which-12)
case(model-17, on-14)
det(model-17, a-15)
amod(model-17, novel-16)
nmod:on(rely-13, model-17)
mark(expressed-25, of-18)
advmod(expressed-25, how-19)
nsubjpass(expressed-25, relations-20)
cc(relations-20, and-21)
nmod:poss(arguments-23, their-22)
nsubj:xsubj(double-30, arguments-23)
auxpass(expressed-25, are-24)
acl:of(model-17, expressed-25)
case(sentences-28, in-26)
amod(sentences-28, English-27)
nmod:in(expressed-25, sentences-28)
mark(double-30, to-29)
xcomp(expressed-25, double-30)
xcomp(double-30, precision/recall-31)
case(systems-35, compared-32)
mwe(compared-32, with-33)
amod(systems-35, previous-34)
advcl:compared_with(double-30, systems-35)
case(TEXTRUNNER-38, such-36)
mwe(such-36, as-37)
nmod:such_as(systems-35, TEXTRUNNER-38)
cc(TEXTRUNNER-38, and-39)
conj:and(TEXTRUNNER-38, WOE-40)

root(ROOT-0, double-30)
nsubj:xsubj(double-30, relations-20)
cc(relations-20, and-21)
nmod:poss(arguments-23, their-22)
nsubj:xsubj(double-30, arguments-23)
xcomp(double-30, precision/recall-31)
case(systems-35, compared-32)
mwe(compared-32, with-33)
amod(systems-35, previous-34)
advcl:compared_with(double-30, systems-35)
case(TEXTRUNNER-38, such-36)
mwe(such-36, as-37)
nmod:such_as(systems-35, TEXTRUNNER-38)
cc(TEXTRUNNER-38, and-39)
conj:and(TEXTRUNNER-38, WOE-40)

root(ROOT-0, precision/recall-31)

root(ROOT-0, systems-35)
nmod:poss(arguments-23, their-22)
nsubj(systems-35, arguments-23)
case(systems-35, compared-32)
mwe(compared-32, with-33)
amod(systems-35, previous-34)
case(TEXTRUNNER-38, such-36)
mwe(such-36, as-37)
nmod:such_as(systems-35, TEXTRUNNER-38)
cc(TEXTRUNNER-38, and-39)
conj:and(TEXTRUNNER-38, WOE-40)


--------------------File:./data/ijcai2017.txt----------------

Sentence #1: Traditionally, Information Extraction (IE) has focused on satisfying precise, narrow, pre-specified requests from small homogeneous corpora (e.g., extract the location and time of seminars from a set of announcements).
root(ROOT-0, focused-9)
advmod(focused-9, Traditionally-1)
punct(focused-9, ,-2)
compound(Extraction-4, Information-3)
nsubj(focused-9, Extraction-4)
punct(IE-6, -LRB--5)
appos(Extraction-4, IE-6)
punct(IE-6, -RRB--7)
aux(focused-9, has-8)
mark(satisfying-11, on-10)
advcl:on(focused-9, satisfying-11)
amod(requests-17, precise-12)
punct(precise-12, ,-13)
conj(precise-12, narrow-14)
punct(precise-12, ,-15)
dep(precise-12, pre-specified-16)
dobj(satisfying-11, requests-17)
case(corpora-21, from-18)
amod(corpora-21, small-19)
amod(corpora-21, homogeneous-20)
nmod:from(requests-17, corpora-21)
punct(extract-25, -LRB--22)
advmod(extract-25, e.g.-23)
punct(extract-25, ,-24)
dep(corpora-21, extract-25)
det(location-27, the-26)
dep(extract-25, location-27)
cc(location-27, and-28)
dep(extract-25, time-29)
conj:and(location-27, time-29)
case(seminars-31, of-30)
nmod:of(location-27, seminars-31)
case(set-34, from-32)
det(set-34, a-33)
nmod:from(seminars-31, set-34)
case(announcements-36, of-35)
nmod:of(set-34, announcements-36)
punct(extract-25, -RRB--37)
punct(focused-9, .-38)

root(ROOT-0, focused-9)
advmod(focused-9, Traditionally-1)
compound(Extraction-4, Information-3)
nsubj(focused-9, Extraction-4)
appos(Extraction-4, IE-6)
aux(focused-9, has-8)
mark(satisfying-11, on-10)
advcl:on(focused-9, satisfying-11)
amod(requests-17, precise-12)
conj(precise-12, narrow-14)
dep(precise-12, pre-specified-16)
dobj(satisfying-11, requests-17)
case(corpora-21, from-18)
amod(corpora-21, small-19)
amod(corpora-21, homogeneous-20)
nmod:from(requests-17, corpora-21)
advmod(extract-25, e.g.-23)
dep(corpora-21, extract-25)
det(location-27, the-26)
dep(extract-25, location-27)
cc(location-27, and-28)
conj:and(location-27, time-29)
case(seminars-31, of-30)
nmod:of(location-27, seminars-31)
case(set-34, from-32)
det(set-34, a-33)
nmod:from(seminars-31, set-34)
case(announcements-36, of-35)
nmod:of(set-34, announcements-36)

root(ROOT-0, satisfying-11)
compound(Extraction-4, Information-3)
nsubj(satisfying-11, Extraction-4)
appos(Extraction-4, IE-6)
amod(requests-17, precise-12)
conj(precise-12, narrow-14)
dep(precise-12, pre-specified-16)
dobj(satisfying-11, requests-17)
case(corpora-21, from-18)
amod(corpora-21, small-19)
amod(corpora-21, homogeneous-20)
nmod:from(requests-17, corpora-21)
advmod(extract-25, e.g.-23)
dep(corpora-21, extract-25)
det(location-27, the-26)
dep(extract-25, location-27)
cc(location-27, and-28)
conj:and(location-27, time-29)
case(seminars-31, of-30)
nmod:of(location-27, seminars-31)
case(set-34, from-32)
det(set-34, a-33)
nmod:from(seminars-31, set-34)
case(announcements-36, of-35)
nmod:of(set-34, announcements-36)

root(ROOT-0, time-29)


Sentence #2: Shifting to a new domain requires the user to name the target relations and to manually create new extraction rules or hand-tag new training examples.
root(ROOT-0, requires-6)
csubj(requires-6, Shifting-1)
case(domain-5, to-2)
det(domain-5, a-3)
amod(domain-5, new-4)
nmod:to(Shifting-1, domain-5)
det(user-8, the-7)
dobj(requires-6, user-8)
nsubj:xsubj(name-10, user-8)
nsubj:xsubj(create-17, user-8)
mark(name-10, to-9)
xcomp(requires-6, name-10)
det(relations-13, the-11)
compound(relations-13, target-12)
dobj(name-10, relations-13)
cc(name-10, and-14)
mark(create-17, to-15)
advmod(create-17, manually-16)
xcomp(requires-6, create-17)
conj:and(name-10, create-17)
amod(rules-20, new-18)
compound(rules-20, extraction-19)
dobj(create-17, rules-20)
cc(rules-20, or-21)
amod(examples-25, hand-tag-22)
amod(examples-25, new-23)
compound(examples-25, training-24)
dobj(create-17, examples-25)
conj:or(rules-20, examples-25)
punct(requires-6, .-26)

root(ROOT-0, requires-6)
csubj(requires-6, Shifting-1)
case(domain-5, to-2)
det(domain-5, a-3)
amod(domain-5, new-4)
nmod:to(Shifting-1, domain-5)
det(user-8, the-7)
dobj(requires-6, user-8)
mark(name-10, to-9)
xcomp(requires-6, name-10)
det(relations-13, the-11)
compound(relations-13, target-12)
dobj(name-10, relations-13)
cc(name-10, and-14)
mark(create-17, to-15)
advmod(create-17, manually-16)
conj:and(name-10, create-17)
amod(rules-20, new-18)
compound(rules-20, extraction-19)
dobj(create-17, rules-20)
cc(rules-20, or-21)
amod(examples-25, hand-tag-22)
amod(examples-25, new-23)
compound(examples-25, training-24)
dobj(create-17, examples-25)

root(ROOT-0, name-10)
det(user-8, the-7)
nsubj(name-10, user-8)
det(relations-13, the-11)
compound(relations-13, target-12)
dobj(name-10, relations-13)
cc(name-10, and-14)
mark(create-17, to-15)
advmod(create-17, manually-16)
conj:and(name-10, create-17)
amod(rules-20, new-18)
compound(rules-20, extraction-19)
dobj(create-17, rules-20)
cc(rules-20, or-21)
amod(examples-25, hand-tag-22)
amod(examples-25, new-23)
compound(examples-25, training-24)
dobj(create-17, examples-25)

root(ROOT-0, Shifting-1)
case(domain-5, to-2)
det(domain-5, a-3)
amod(domain-5, new-4)
nmod:to(Shifting-1, domain-5)
det(user-8, the-7)
nsubj(Shifting-1, user-8)

root(ROOT-0, create-17)
det(user-8, the-7)
nsubj:xsubj(create-17, user-8)
det(relations-13, the-11)
compound(relations-13, target-12)
nsubj(create-17, relations-13)
advmod(create-17, manually-16)
amod(rules-20, new-18)
compound(rules-20, extraction-19)
dobj(create-17, rules-20)
cc(rules-20, or-21)
amod(examples-25, hand-tag-22)
amod(examples-25, new-23)
compound(examples-25, training-24)
dobj(create-17, examples-25)


Sentence #3: This manual labor scales linearly with the number of target relations.
root(ROOT-0, scales-4)
det(scales-4, This-1)
amod(scales-4, manual-2)
compound(scales-4, labor-3)
advmod(number-8, linearly-5)
case(number-8, with-6)
det(number-8, the-7)
nmod:with(scales-4, number-8)
case(relations-11, of-9)
compound(relations-11, target-10)
nmod:of(number-8, relations-11)
punct(scales-4, .-12)

root(ROOT-0, scales-4)
det(scales-4, This-1)
amod(scales-4, manual-2)
compound(scales-4, labor-3)
advmod(number-8, linearly-5)
case(number-8, with-6)
det(number-8, the-7)
nmod:with(scales-4, number-8)
case(relations-11, of-9)
compound(relations-11, target-10)
nmod:of(number-8, relations-11)


Sentence #4: This paper introduces Open IE (OIE), a new extraction paradigm where the system makes a single data-driven pass over its corpus and extracts a large set of relational tuples without requiring any human input.
root(ROOT-0, introduces-3)
det(paper-2, This-1)
nsubj(introduces-3, paper-2)
compound(IE-5, Open-4)
dobj(introduces-3, IE-5)
punct(OIE-7, -LRB--6)
appos(IE-5, OIE-7)
punct(OIE-7, -RRB--8)
punct(IE-5, ,-9)
det(paradigm-13, a-10)
amod(paradigm-13, new-11)
compound(paradigm-13, extraction-12)
appos(IE-5, paradigm-13)
advmod(makes-17, where-14)
det(system-16, the-15)
nsubj(makes-17, system-16)
acl:relcl(paradigm-13, makes-17)
det(pass-21, a-18)
amod(pass-21, single-19)
amod(pass-21, data-driven-20)
dobj(makes-17, pass-21)
case(corpus-24, over-22)
nmod:poss(corpus-24, its-23)
nmod:over(pass-21, corpus-24)
cc(corpus-24, and-25)
nmod:over(pass-21, extracts-26)
conj:and(corpus-24, extracts-26)
det(set-29, a-27)
amod(set-29, large-28)
dep(pass-21, set-29)
case(tuples-32, of-30)
amod(tuples-32, relational-31)
nmod:of(set-29, tuples-32)
mark(requiring-34, without-33)
acl:without(set-29, requiring-34)
det(input-37, any-35)
amod(input-37, human-36)
dobj(requiring-34, input-37)
punct(introduces-3, .-38)

root(ROOT-0, introduces-3)
det(paper-2, This-1)
nsubj(introduces-3, paper-2)
compound(IE-5, Open-4)
dobj(introduces-3, IE-5)
appos(IE-5, OIE-7)
det(paradigm-13, a-10)
amod(paradigm-13, new-11)
compound(paradigm-13, extraction-12)
appos(IE-5, paradigm-13)
advmod(makes-17, where-14)
det(system-16, the-15)
nsubj(makes-17, system-16)
acl:relcl(paradigm-13, makes-17)
det(pass-21, a-18)
amod(pass-21, single-19)
amod(pass-21, data-driven-20)
dobj(makes-17, pass-21)
case(corpus-24, over-22)
nmod:poss(corpus-24, its-23)
nmod:over(pass-21, corpus-24)
cc(corpus-24, and-25)
conj:and(corpus-24, extracts-26)
det(set-29, a-27)
amod(set-29, large-28)
dep(pass-21, set-29)
case(tuples-32, of-30)
amod(tuples-32, relational-31)
nmod:of(set-29, tuples-32)
mark(requiring-34, without-33)
acl:without(set-29, requiring-34)
det(input-37, any-35)
amod(input-37, human-36)
dobj(requiring-34, input-37)

root(ROOT-0, makes-17)
advmod(makes-17, where-14)
det(system-16, the-15)
nsubj(makes-17, system-16)
det(pass-21, a-18)
amod(pass-21, single-19)
amod(pass-21, data-driven-20)
dobj(makes-17, pass-21)
case(corpus-24, over-22)
nmod:poss(corpus-24, its-23)
nmod:over(pass-21, corpus-24)
cc(corpus-24, and-25)
conj:and(corpus-24, extracts-26)
det(set-29, a-27)
amod(set-29, large-28)
dep(pass-21, set-29)
case(tuples-32, of-30)
amod(tuples-32, relational-31)
nmod:of(set-29, tuples-32)
mark(requiring-34, without-33)
acl:without(set-29, requiring-34)
det(input-37, any-35)
amod(input-37, human-36)
dobj(requiring-34, input-37)

root(ROOT-0, extracts-26)


Sentence #5: The paper also introduces TEXTRUNNER, a fully implemented, highly scalable OIE system where the tuples are assigned a probability and indexed to support efficient extraction and exploration via user queries.
root(ROOT-0, introduces-4)
det(paper-2, The-1)
nsubj(introduces-4, paper-2)
advmod(introduces-4, also-3)
dobj(introduces-4, TEXTRUNNER-5)
punct(TEXTRUNNER-5, ,-6)
det(system-14, a-7)
advmod(implemented-9, fully-8)
amod(system-14, implemented-9)
punct(system-14, ,-10)
advmod(scalable-12, highly-11)
amod(system-14, scalable-12)
compound(system-14, OIE-13)
appos(TEXTRUNNER-5, system-14)
advmod(assigned-19, where-15)
det(tuples-17, the-16)
nsubjpass(assigned-19, tuples-17)
nsubjpass(indexed-23, tuples-17)
nsubj:xsubj(support-25, tuples-17)
auxpass(assigned-19, are-18)
acl:relcl(system-14, assigned-19)
det(probability-21, a-20)
dobj(assigned-19, probability-21)
cc(assigned-19, and-22)
acl:relcl(system-14, indexed-23)
conj:and(assigned-19, indexed-23)
mark(support-25, to-24)
xcomp(indexed-23, support-25)
amod(extraction-27, efficient-26)
dobj(support-25, extraction-27)
cc(extraction-27, and-28)
dobj(support-25, exploration-29)
conj:and(extraction-27, exploration-29)
case(queries-32, via-30)
compound(queries-32, user-31)
nmod:via(support-25, queries-32)
punct(introduces-4, .-33)

root(ROOT-0, introduces-4)
det(paper-2, The-1)
nsubj(introduces-4, paper-2)
advmod(introduces-4, also-3)
dobj(introduces-4, TEXTRUNNER-5)
det(system-14, a-7)
advmod(implemented-9, fully-8)
amod(system-14, implemented-9)
advmod(scalable-12, highly-11)
amod(system-14, scalable-12)
compound(system-14, OIE-13)
appos(TEXTRUNNER-5, system-14)
advmod(assigned-19, where-15)
det(tuples-17, the-16)
nsubjpass(assigned-19, tuples-17)
auxpass(assigned-19, are-18)
acl:relcl(system-14, assigned-19)
det(probability-21, a-20)
dobj(assigned-19, probability-21)
cc(assigned-19, and-22)
conj:and(assigned-19, indexed-23)
mark(support-25, to-24)
xcomp(indexed-23, support-25)
amod(extraction-27, efficient-26)
dobj(support-25, extraction-27)
cc(extraction-27, and-28)
dobj(support-25, exploration-29)
case(queries-32, via-30)
compound(queries-32, user-31)
nmod:via(support-25, queries-32)

root(ROOT-0, assigned-19)
advmod(assigned-19, where-15)
det(tuples-17, the-16)
nsubjpass(assigned-19, tuples-17)
auxpass(assigned-19, are-18)
det(probability-21, a-20)
dobj(assigned-19, probability-21)
cc(assigned-19, and-22)
conj:and(assigned-19, indexed-23)
mark(support-25, to-24)
xcomp(indexed-23, support-25)
amod(extraction-27, efficient-26)
dobj(support-25, extraction-27)
cc(extraction-27, and-28)
dobj(support-25, exploration-29)
case(queries-32, via-30)
compound(queries-32, user-31)
nmod:via(support-25, queries-32)

root(ROOT-0, indexed-23)
det(tuples-17, the-16)
nsubj(indexed-23, tuples-17)
mark(support-25, to-24)
xcomp(indexed-23, support-25)
amod(extraction-27, efficient-26)
dobj(support-25, extraction-27)
cc(extraction-27, and-28)
dobj(support-25, exploration-29)
case(queries-32, via-30)
compound(queries-32, user-31)
nmod:via(support-25, queries-32)

root(ROOT-0, support-25)
det(tuples-17, the-16)
nsubj:xsubj(support-25, tuples-17)
amod(extraction-27, efficient-26)
dobj(support-25, extraction-27)
cc(extraction-27, and-28)
dobj(support-25, exploration-29)
case(queries-32, via-30)
compound(queries-32, user-31)
nmod:via(support-25, queries-32)

root(ROOT-0, probability-21)
det(tuples-17, the-16)
nsubj(probability-21, tuples-17)
det(probability-21, a-20)


Sentence #6: We report on experiments over a 9,000,000 Web page corpus that compare TEXTRUNNER with KNOWITALL, a state-of-the-art Web IE system.
root(ROOT-0, report-2)
nsubj(report-2, We-1)
case(experiments-4, on-3)
nmod:on(report-2, experiments-4)
case(corpus-10, over-5)
det(corpus-10, a-6)
nummod(corpus-10, 9,000,000-7)
compound(corpus-10, Web-8)
compound(corpus-10, page-9)
nmod:over(experiments-4, corpus-10)
nsubj(compare-12, corpus-10)
ref(corpus-10, that-11)
acl:relcl(corpus-10, compare-12)
dobj(compare-12, TEXTRUNNER-13)
case(KNOWITALL-15, with-14)
nmod:with(compare-12, KNOWITALL-15)
punct(KNOWITALL-15, ,-16)
det(system-21, a-17)
amod(system-21, state-of-the-art-18)
compound(system-21, Web-19)
amod(system-21, IE-20)
appos(KNOWITALL-15, system-21)
punct(report-2, .-22)

root(ROOT-0, report-2)
nsubj(report-2, We-1)
case(experiments-4, on-3)
nmod:on(report-2, experiments-4)
case(corpus-10, over-5)
det(corpus-10, a-6)
nummod(corpus-10, 9,000,000-7)
compound(corpus-10, Web-8)
compound(corpus-10, page-9)
nmod:over(experiments-4, corpus-10)
ref(corpus-10, that-11)
acl:relcl(corpus-10, compare-12)
dobj(compare-12, TEXTRUNNER-13)
case(KNOWITALL-15, with-14)
nmod:with(compare-12, KNOWITALL-15)
det(system-21, a-17)
amod(system-21, state-of-the-art-18)
compound(system-21, Web-19)
amod(system-21, IE-20)
appos(KNOWITALL-15, system-21)

root(ROOT-0, compare-12)
case(corpus-10, over-5)
det(corpus-10, a-6)
nummod(corpus-10, 9,000,000-7)
compound(corpus-10, Web-8)
compound(corpus-10, page-9)
nsubj(compare-12, corpus-10)
ref(corpus-10, that-11)
dobj(compare-12, TEXTRUNNER-13)
case(KNOWITALL-15, with-14)
nmod:with(compare-12, KNOWITALL-15)
det(system-21, a-17)
amod(system-21, state-of-the-art-18)
compound(system-21, Web-19)
amod(system-21, IE-20)
appos(KNOWITALL-15, system-21)


Sentence #7: TEXTRUNNER achieves an error reduction of 33% on a comparable set of extractions.
root(ROOT-0, achieves-2)
nsubj(achieves-2, TEXTRUNNER-1)
det(reduction-5, an-3)
compound(reduction-5, error-4)
dobj(achieves-2, reduction-5)
case(%-8, of-6)
nummod(%-8, 33-7)
nmod:of(reduction-5, %-8)
case(set-12, on-9)
det(set-12, a-10)
amod(set-12, comparable-11)
nmod:on(reduction-5, set-12)
case(extractions-14, of-13)
nmod:of(set-12, extractions-14)
punct(achieves-2, .-15)

root(ROOT-0, achieves-2)
nsubj(achieves-2, TEXTRUNNER-1)
det(reduction-5, an-3)
compound(reduction-5, error-4)
dobj(achieves-2, reduction-5)
case(%-8, of-6)
nummod(%-8, 33-7)
nmod:of(reduction-5, %-8)
case(set-12, on-9)
det(set-12, a-10)
amod(set-12, comparable-11)
nmod:on(reduction-5, set-12)
case(extractions-14, of-13)
nmod:of(set-12, extractions-14)


Sentence #8: Furthermore, in the amount of time it takes KNOWITALL to perform extraction for a handful of pre-specified relations, TEXTRUNNER extracts a far broader set of facts reflecting orders of magnitude more relations, discovered on the fly.
root(ROOT-0, takes-9)
advmod(takes-9, Furthermore-1)
punct(takes-9, ,-2)
case(amount-5, in-3)
det(amount-5, the-4)
nmod:in(takes-9, amount-5)
case(time-7, of-6)
nmod:of(amount-5, time-7)
nsubj(takes-9, it-8)
dobj(takes-9, KNOWITALL-10)
mark(perform-12, to-11)
advcl:to(takes-9, perform-12)
dobj(perform-12, extraction-13)
case(handful-16, for-14)
det(handful-16, a-15)
nmod:for(perform-12, handful-16)
case(relations-19, of-17)
amod(relations-19, pre-specified-18)
nmod:of(handful-16, relations-19)
punct(takes-9, ,-20)
compound(extracts-22, TEXTRUNNER-21)
dobj(takes-9, extracts-22)
det(set-26, a-23)
advmod(broader-25, far-24)
amod(set-26, broader-25)
dep(extracts-22, set-26)
case(facts-28, of-27)
nmod:of(set-26, facts-28)
acl(set-26, reflecting-29)
dobj(reflecting-29, orders-30)
case(magnitude-32, of-31)
nmod:of(orders-30, magnitude-32)
amod(relations-34, more-33)
dep(orders-30, relations-34)
punct(relations-34, ,-35)
acl(relations-34, discovered-36)
case(fly-39, on-37)
det(fly-39, the-38)
nmod:on(discovered-36, fly-39)
punct(takes-9, .-40)

root(ROOT-0, takes-9)
advmod(takes-9, Furthermore-1)
case(amount-5, in-3)
det(amount-5, the-4)
nmod:in(takes-9, amount-5)
case(time-7, of-6)
nmod:of(amount-5, time-7)
nsubj(takes-9, it-8)
dobj(takes-9, KNOWITALL-10)
mark(perform-12, to-11)
advcl:to(takes-9, perform-12)
dobj(perform-12, extraction-13)
case(handful-16, for-14)
det:qmod(relations-19, a-15)
mwe(a-15, handful-16)
mwe(a-15, of-17)
amod(relations-19, pre-specified-18)
nmod(perform-12, relations-19)
compound(extracts-22, TEXTRUNNER-21)
dobj(takes-9, extracts-22)
det(set-26, a-23)
advmod(broader-25, far-24)
amod(set-26, broader-25)
dep(extracts-22, set-26)
case(facts-28, of-27)
nmod:of(set-26, facts-28)
acl(set-26, reflecting-29)
dobj(reflecting-29, orders-30)
case(magnitude-32, of-31)
nmod:of(orders-30, magnitude-32)
amod(relations-34, more-33)
dep(orders-30, relations-34)
acl(relations-34, discovered-36)
case(fly-39, on-37)
det(fly-39, the-38)
nmod:on(discovered-36, fly-39)

root(ROOT-0, perform-12)
nsubj(perform-12, it-8)
dobj(perform-12, extraction-13)
case(handful-16, for-14)
det:qmod(relations-19, a-15)
mwe(a-15, handful-16)
mwe(a-15, of-17)
amod(relations-19, pre-specified-18)
nmod(perform-12, relations-19)


Sentence #9: We report statistics on TEXTRUNNER's 11,000,000 highest probability tuples, and show that they contain over 1,000,000 concrete facts and over 6,500,000 more abstract assertions.
root(ROOT-0, report-2)
nsubj(report-2, We-1)
nsubj(show-13, We-1)
dobj(report-2, statistics-3)
case(tuples-10, on-4)
nmod:poss(tuples-10, TEXTRUNNER-5)
case(TEXTRUNNER-5, 's-6)
nummod(tuples-10, 11,000,000-7)
amod(tuples-10, highest-8)
compound(tuples-10, probability-9)
nmod:on(statistics-3, tuples-10)
punct(report-2, ,-11)
cc(report-2, and-12)
conj:and(report-2, show-13)
mark(contain-16, that-14)
nsubj(contain-16, they-15)
ccomp(show-13, contain-16)
advmod(1,000,000-18, over-17)
nummod(facts-20, 1,000,000-18)
amod(facts-20, concrete-19)
dobj(contain-16, facts-20)
cc(facts-20, and-21)
case(assertions-26, over-22)
nummod(assertions-26, 6,500,000-23)
amod(assertions-26, more-24)
amod(assertions-26, abstract-25)
dobj(contain-16, assertions-26)
conj:and(facts-20, assertions-26)
punct(report-2, .-27)

root(ROOT-0, report-2)
nsubj(report-2, We-1)
dobj(report-2, statistics-3)
case(tuples-10, on-4)
nmod:poss(tuples-10, TEXTRUNNER-5)
case(TEXTRUNNER-5, 's-6)
nummod(tuples-10, 11,000,000-7)
amod(tuples-10, highest-8)
compound(tuples-10, probability-9)
nmod:on(statistics-3, tuples-10)
cc(report-2, and-12)
conj:and(report-2, show-13)
mark(contain-16, that-14)
nsubj(contain-16, they-15)
ccomp(show-13, contain-16)
advmod(1,000,000-18, over-17)
nummod(facts-20, 1,000,000-18)
amod(facts-20, concrete-19)
dobj(contain-16, facts-20)
cc(facts-20, and-21)
case(assertions-26, over-22)
nummod(assertions-26, 6,500,000-23)
amod(assertions-26, more-24)
amod(assertions-26, abstract-25)
dobj(contain-16, assertions-26)

root(ROOT-0, show-13)
nsubj(show-13, We-1)
mark(contain-16, that-14)
nsubj(contain-16, they-15)
ccomp(show-13, contain-16)
advmod(1,000,000-18, over-17)
nummod(facts-20, 1,000,000-18)
amod(facts-20, concrete-19)
dobj(contain-16, facts-20)
cc(facts-20, and-21)
case(assertions-26, over-22)
nummod(assertions-26, 6,500,000-23)
amod(assertions-26, more-24)
amod(assertions-26, abstract-25)
dobj(contain-16, assertions-26)

root(ROOT-0, contain-16)
nsubj(contain-16, they-15)
advmod(1,000,000-18, over-17)
nummod(facts-20, 1,000,000-18)
amod(facts-20, concrete-19)
dobj(contain-16, facts-20)
cc(facts-20, and-21)
case(assertions-26, over-22)
nummod(assertions-26, 6,500,000-23)
amod(assertions-26, more-24)
amod(assertions-26, abstract-25)
dobj(contain-16, assertions-26)

root(ROOT-0, assertions-26)
advmod(1,000,000-18, over-17)
nummod(facts-20, 1,000,000-18)
amod(facts-20, concrete-19)
nsubj(assertions-26, facts-20)
cc(facts-20, and-21)
case(assertions-26, over-22)
nummod(assertions-26, 6,500,000-23)
amod(assertions-26, more-24)
amod(assertions-26, abstract-25)


--------------------File:./data/unsup2012.txt----------------

Sentence #1: Building shallow semantic representations from text corpora is the first step to perform more complex tasks such as text entailment, enrichment of knowledge bases, or question answering.
root(ROOT-0, step-11)
compound(representations-4, Building-1)
amod(representations-4, shallow-2)
amod(representations-4, semantic-3)
nsubj(step-11, representations-4)
case(corpora-7, from-5)
compound(corpora-7, text-6)
nmod:from(representations-4, corpora-7)
cop(step-11, is-8)
det(step-11, the-9)
amod(step-11, first-10)
mark(perform-13, to-12)
acl:to(step-11, perform-13)
advmod(complex-15, more-14)
amod(tasks-16, complex-15)
dobj(perform-13, tasks-16)
case(entailment-20, such-17)
mwe(such-17, as-18)
compound(entailment-20, text-19)
nmod:such_as(tasks-16, entailment-20)
punct(entailment-20, ,-21)
nmod:such_as(tasks-16, enrichment-22)
conj:or(entailment-20, enrichment-22)
case(bases-25, of-23)
compound(bases-25, knowledge-24)
nmod:of(enrichment-22, bases-25)
punct(entailment-20, ,-26)
cc(entailment-20, or-27)
compound(answering-29, question-28)
nmod:such_as(tasks-16, answering-29)
conj:or(entailment-20, answering-29)
punct(step-11, .-30)

root(ROOT-0, step-11)
compound(representations-4, Building-1)
amod(representations-4, shallow-2)
amod(representations-4, semantic-3)
nsubj(step-11, representations-4)
case(corpora-7, from-5)
compound(corpora-7, text-6)
nmod:from(representations-4, corpora-7)
cop(step-11, is-8)
det(step-11, the-9)
amod(step-11, first-10)
mark(perform-13, to-12)
acl:to(step-11, perform-13)
advmod(complex-15, more-14)
amod(tasks-16, complex-15)
dobj(perform-13, tasks-16)
case(entailment-20, such-17)
mwe(such-17, as-18)
compound(entailment-20, text-19)
nmod:such_as(tasks-16, entailment-20)
conj:or(entailment-20, enrichment-22)
case(bases-25, of-23)
compound(bases-25, knowledge-24)
nmod:of(enrichment-22, bases-25)
cc(entailment-20, or-27)
compound(answering-29, question-28)
conj:or(entailment-20, answering-29)

root(ROOT-0, enrichment-22)
case(bases-25, of-23)
compound(bases-25, knowledge-24)
nmod:of(enrichment-22, bases-25)

root(ROOT-0, answering-29)
compound(answering-29, question-28)


Sentence #2: Open Information Extraction (OIE) is a recent unsupervised strategy to extract billions of basic assertions from massive corpora, which can be considered as being a shallow semantic representation of those corpora.
root(ROOT-0, strategy-11)
compound(Extraction-3, Open-1)
compound(Extraction-3, Information-2)
nsubj(strategy-11, Extraction-3)
nsubj:xsubj(extract-13, Extraction-3)
punct(OIE-5, -LRB--4)
appos(Extraction-3, OIE-5)
punct(OIE-5, -RRB--6)
cop(strategy-11, is-7)
det(strategy-11, a-8)
amod(strategy-11, recent-9)
amod(strategy-11, unsupervised-10)
mark(extract-13, to-12)
xcomp(strategy-11, extract-13)
nsubjpass(considered-25, extract-13)
dobj(extract-13, billions-14)
case(assertions-17, of-15)
amod(assertions-17, basic-16)
nmod:of(billions-14, assertions-17)
case(corpora-20, from-18)
amod(corpora-20, massive-19)
nmod:from(extract-13, corpora-20)
punct(extract-13, ,-21)
ref(extract-13, which-22)
aux(considered-25, can-23)
auxpass(considered-25, be-24)
acl:relcl(extract-13, considered-25)
mark(representation-31, as-26)
cop(representation-31, being-27)
det(representation-31, a-28)
amod(representation-31, shallow-29)
amod(representation-31, semantic-30)
advcl:as(considered-25, representation-31)
case(corpora-34, of-32)
det(corpora-34, those-33)
nmod:of(representation-31, corpora-34)
punct(strategy-11, .-35)

root(ROOT-0, strategy-11)
compound(Extraction-3, Open-1)
compound(Extraction-3, Information-2)
nsubj(strategy-11, Extraction-3)
appos(Extraction-3, OIE-5)
cop(strategy-11, is-7)
det(strategy-11, a-8)
amod(strategy-11, recent-9)
amod(strategy-11, unsupervised-10)
mark(extract-13, to-12)
xcomp(strategy-11, extract-13)
det:qmod(assertions-17, billions-14)
mwe(billions-14, of-15)
amod(assertions-17, basic-16)
dobj(extract-13, assertions-17)
case(corpora-20, from-18)
amod(corpora-20, massive-19)
nmod:from(extract-13, corpora-20)
ref(extract-13, which-22)
aux(considered-25, can-23)
auxpass(considered-25, be-24)
acl:relcl(extract-13, considered-25)
mark(representation-31, as-26)
cop(representation-31, being-27)
det(representation-31, a-28)
amod(representation-31, shallow-29)
amod(representation-31, semantic-30)
advcl:as(considered-25, representation-31)
case(corpora-34, of-32)
det(corpora-34, those-33)
nmod:of(representation-31, corpora-34)

root(ROOT-0, extract-13)
compound(Extraction-3, Open-1)
compound(Extraction-3, Information-2)
nsubj(extract-13, Extraction-3)
appos(Extraction-3, OIE-5)
det:qmod(assertions-17, billions-14)
mwe(billions-14, of-15)
amod(assertions-17, basic-16)
dobj(extract-13, assertions-17)
case(corpora-20, from-18)
amod(corpora-20, massive-19)
nmod:from(extract-13, corpora-20)
ref(extract-13, which-22)
aux(considered-25, can-23)
auxpass(considered-25, be-24)
acl:relcl(extract-13, considered-25)
mark(representation-31, as-26)
cop(representation-31, being-27)
det(representation-31, a-28)
amod(representation-31, shallow-29)
amod(representation-31, semantic-30)
advcl:as(considered-25, representation-31)
case(corpora-34, of-32)
det(corpora-34, those-33)
nmod:of(representation-31, corpora-34)

root(ROOT-0, considered-25)
mark(extract-13, to-12)
nsubjpass(considered-25, extract-13)
det:qmod(assertions-17, billions-14)
mwe(billions-14, of-15)
amod(assertions-17, basic-16)
dobj(extract-13, assertions-17)
case(corpora-20, from-18)
amod(corpora-20, massive-19)
nmod:from(extract-13, corpora-20)
ref(extract-13, which-22)
aux(considered-25, can-23)
auxpass(considered-25, be-24)
mark(representation-31, as-26)
cop(representation-31, being-27)
det(representation-31, a-28)
amod(representation-31, shallow-29)
amod(representation-31, semantic-30)
advcl:as(considered-25, representation-31)
case(corpora-34, of-32)
det(corpora-34, those-33)
nmod:of(representation-31, corpora-34)

root(ROOT-0, representation-31)
mark(representation-31, as-26)
cop(representation-31, being-27)
det(representation-31, a-28)
amod(representation-31, shallow-29)
amod(representation-31, semantic-30)
case(corpora-34, of-32)
det(corpora-34, those-33)
nmod:of(representation-31, corpora-34)


Sentence #3: In this paper, we propose a new multilingual OIE system based on robust and fast rule-based dependency parsing.
root(ROOT-0, propose-6)
case(paper-3, In-1)
det(paper-3, this-2)
nmod:in(propose-6, paper-3)
punct(propose-6, ,-4)
nsubj(propose-6, we-5)
det(system-11, a-7)
amod(system-11, new-8)
amod(system-11, multilingual-9)
compound(system-11, OIE-10)
dobj(propose-6, system-11)
acl(system-11, based-12)
case(parsing-19, on-13)
amod(parsing-19, robust-14)
cc(robust-14, and-15)
conj:and(robust-14, fast-16)
amod(parsing-19, fast-16)
amod(parsing-19, rule-based-17)
compound(parsing-19, dependency-18)
nmod:on(based-12, parsing-19)
punct(propose-6, .-20)

root(ROOT-0, propose-6)
case(paper-3, In-1)
det(paper-3, this-2)
nmod:in(propose-6, paper-3)
nsubj(propose-6, we-5)
det(system-11, a-7)
amod(system-11, new-8)
amod(system-11, multilingual-9)
compound(system-11, OIE-10)
dobj(propose-6, system-11)
acl(system-11, based-12)
case(parsing-19, on-13)
amod(parsing-19, robust-14)
cc(robust-14, and-15)
conj:and(robust-14, fast-16)
amod(parsing-19, rule-based-17)
compound(parsing-19, dependency-18)
nmod:on(based-12, parsing-19)


Sentence #4: It permits to extract more precise assertions (verb-based triples) from text than state of the art OIE systems, keeping a crucial property of those systems: scaling to Web-size document collections.
root(ROOT-0, permits-2)
nsubj(permits-2, It-1)
nsubj:xsubj(extract-4, It-1)
mark(extract-4, to-3)
xcomp(permits-2, extract-4)
advmod(precise-6, more-5)
amod(assertions-7, precise-6)
dobj(extract-4, assertions-7)
punct(triples-10, -LRB--8)
amod(triples-10, verb-based-9)
appos(assertions-7, triples-10)
punct(triples-10, -RRB--11)
case(text-13, from-12)
nmod:from(extract-4, text-13)
case(state-15, than-14)
nmod:than(extract-4, state-15)
case(systems-20, of-16)
det(systems-20, the-17)
compound(systems-20, art-18)
compound(systems-20, OIE-19)
nmod:of(state-15, systems-20)
punct(extract-4, ,-21)
advcl(extract-4, keeping-22)
det(property-25, a-23)
amod(property-25, crucial-24)
dobj(keeping-22, property-25)
case(systems-28, of-26)
det(systems-28, those-27)
nmod:of(property-25, systems-28)
punct(permits-2, :-29)
dep(permits-2, scaling-30)
case(collections-34, to-31)
amod(collections-34, Web-size-32)
compound(collections-34, document-33)
nmod:to(scaling-30, collections-34)
punct(permits-2, .-35)

root(ROOT-0, permits-2)
nsubj(permits-2, It-1)
mark(extract-4, to-3)
xcomp(permits-2, extract-4)
advmod(precise-6, more-5)
amod(assertions-7, precise-6)
dobj(extract-4, assertions-7)
amod(triples-10, verb-based-9)
appos(assertions-7, triples-10)
case(text-13, from-12)
nmod:from(extract-4, text-13)
case(state-15, than-14)
nmod:than(extract-4, state-15)
case(systems-20, of-16)
det(systems-20, the-17)
compound(systems-20, art-18)
compound(systems-20, OIE-19)
nmod:of(state-15, systems-20)
advcl(extract-4, keeping-22)
det(property-25, a-23)
amod(property-25, crucial-24)
dobj(keeping-22, property-25)
case(systems-28, of-26)
det(systems-28, those-27)
nmod:of(property-25, systems-28)
dep(permits-2, scaling-30)
case(collections-34, to-31)
amod(collections-34, Web-size-32)
compound(collections-34, document-33)
nmod:to(scaling-30, collections-34)

root(ROOT-0, extract-4)
nsubj(extract-4, It-1)
advmod(precise-6, more-5)
amod(assertions-7, precise-6)
dobj(extract-4, assertions-7)
amod(triples-10, verb-based-9)
appos(assertions-7, triples-10)
case(text-13, from-12)
nmod:from(extract-4, text-13)
case(state-15, than-14)
nmod:than(extract-4, state-15)
case(systems-20, of-16)
det(systems-20, the-17)
compound(systems-20, art-18)
compound(systems-20, OIE-19)
nmod:of(state-15, systems-20)
advcl(extract-4, keeping-22)
det(property-25, a-23)
amod(property-25, crucial-24)
dobj(keeping-22, property-25)
case(systems-28, of-26)
det(systems-28, those-27)
nmod:of(property-25, systems-28)

root(ROOT-0, keeping-22)
det(property-25, a-23)
amod(property-25, crucial-24)
dobj(keeping-22, property-25)
case(systems-28, of-26)
det(systems-28, those-27)
nmod:of(property-25, systems-28)


--------------------File:./data/emnlp2011.txt----------------

Sentence #1: Open Information Extraction (IE) is the task of extracting assertions from massive corpora without requiring a pre-specified vocabulary.
root(ROOT-0, task-9)
compound(Extraction-3, Open-1)
compound(Extraction-3, Information-2)
nsubj(task-9, Extraction-3)
punct(IE-5, -LRB--4)
appos(Extraction-3, IE-5)
punct(IE-5, -RRB--6)
cop(task-9, is-7)
det(task-9, the-8)
mark(extracting-11, of-10)
acl:of(task-9, extracting-11)
dobj(extracting-11, assertions-12)
case(corpora-15, from-13)
amod(corpora-15, massive-14)
nmod:from(extracting-11, corpora-15)
mark(requiring-17, without-16)
advcl:without(extracting-11, requiring-17)
det(vocabulary-20, a-18)
amod(vocabulary-20, pre-specified-19)
dobj(requiring-17, vocabulary-20)
punct(task-9, .-21)

root(ROOT-0, task-9)
compound(Extraction-3, Open-1)
compound(Extraction-3, Information-2)
nsubj(task-9, Extraction-3)
appos(Extraction-3, IE-5)
cop(task-9, is-7)
det(task-9, the-8)
mark(extracting-11, of-10)
acl:of(task-9, extracting-11)
dobj(extracting-11, assertions-12)
case(corpora-15, from-13)
amod(corpora-15, massive-14)
nmod:from(extracting-11, corpora-15)
mark(requiring-17, without-16)
advcl:without(extracting-11, requiring-17)
det(vocabulary-20, a-18)
amod(vocabulary-20, pre-specified-19)
dobj(requiring-17, vocabulary-20)

root(ROOT-0, requiring-17)
mark(requiring-17, without-16)
det(vocabulary-20, a-18)
amod(vocabulary-20, pre-specified-19)
dobj(requiring-17, vocabulary-20)


Sentence #2: This paper shows that the output of state-of-the-art Open IE systems is rife with uninformative and incoherent extractions.
root(ROOT-0, shows-3)
det(paper-2, This-1)
nsubj(shows-3, paper-2)
mark(rife-13, that-4)
det(output-6, the-5)
nsubj(rife-13, output-6)
case(systems-11, of-7)
amod(systems-11, state-of-the-art-8)
compound(systems-11, Open-9)
compound(systems-11, IE-10)
nmod:of(output-6, systems-11)
cop(rife-13, is-12)
ccomp(shows-3, rife-13)
case(extractions-18, with-14)
amod(extractions-18, uninformative-15)
cc(uninformative-15, and-16)
conj:and(uninformative-15, incoherent-17)
amod(extractions-18, incoherent-17)
nmod:with(rife-13, extractions-18)
punct(shows-3, .-19)

root(ROOT-0, shows-3)
det(paper-2, This-1)
nsubj(shows-3, paper-2)
mark(rife-13, that-4)
det(output-6, the-5)
nsubj(rife-13, output-6)
case(systems-11, of-7)
amod(systems-11, state-of-the-art-8)
compound(systems-11, Open-9)
compound(systems-11, IE-10)
nmod:of(output-6, systems-11)
cop(rife-13, is-12)
ccomp(shows-3, rife-13)
case(extractions-18, with-14)
amod(extractions-18, uninformative-15)
cc(uninformative-15, and-16)
conj:and(uninformative-15, incoherent-17)
nmod:with(rife-13, extractions-18)

root(ROOT-0, rife-13)
det(output-6, the-5)
nsubj(rife-13, output-6)
case(systems-11, of-7)
amod(systems-11, state-of-the-art-8)
compound(systems-11, Open-9)
compound(systems-11, IE-10)
nmod:of(output-6, systems-11)
cop(rife-13, is-12)
case(extractions-18, with-14)
amod(extractions-18, uninformative-15)
cc(uninformative-15, and-16)
conj:and(uninformative-15, incoherent-17)
nmod:with(rife-13, extractions-18)


Sentence #3: To overcome these problems, we introduce two simple syntactic and lexical constraints on binary relations expressed by verbs.
root(ROOT-0, introduce-7)
mark(overcome-2, To-1)
advcl:to(introduce-7, overcome-2)
det(problems-4, these-3)
dobj(overcome-2, problems-4)
punct(introduce-7, ,-5)
nsubj(introduce-7, we-6)
nummod(syntactic-10, two-8)
amod(syntactic-10, simple-9)
dobj(introduce-7, syntactic-10)
cc(syntactic-10, and-11)
amod(constraints-13, lexical-12)
dobj(introduce-7, constraints-13)
conj:and(syntactic-10, constraints-13)
case(relations-16, on-14)
amod(relations-16, binary-15)
nmod:on(constraints-13, relations-16)
acl(relations-16, expressed-17)
case(verbs-19, by-18)
nmod:by(expressed-17, verbs-19)
punct(introduce-7, .-20)

root(ROOT-0, introduce-7)
mark(overcome-2, To-1)
advcl:to(introduce-7, overcome-2)
det(problems-4, these-3)
dobj(overcome-2, problems-4)
nsubj(introduce-7, we-6)
nummod(syntactic-10, two-8)
amod(syntactic-10, simple-9)
dobj(introduce-7, syntactic-10)
cc(syntactic-10, and-11)
amod(constraints-13, lexical-12)
dobj(introduce-7, constraints-13)
case(relations-16, on-14)
amod(relations-16, binary-15)
nmod:on(constraints-13, relations-16)
acl(relations-16, expressed-17)
case(verbs-19, by-18)
nmod:by(expressed-17, verbs-19)

root(ROOT-0, overcome-2)
det(problems-4, these-3)
dobj(overcome-2, problems-4)
nsubj(overcome-2, we-6)


Sentence #4: We implemented the constraints in the ReVerb Open IE system, which more than doubles the area under the precision-recall curve relative to previous extractors such as TextRunner and woepos.
root(ROOT-0, implemented-2)
nsubj(implemented-2, We-1)
det(constraints-4, the-3)
dobj(implemented-2, constraints-4)
case(system-10, in-5)
det(system-10, the-6)
compound(system-10, ReVerb-7)
compound(system-10, Open-8)
amod(system-10, IE-9)
nmod:in(constraints-4, system-10)
nsubj(doubles-15, system-10)
punct(system-10, ,-11)
ref(system-10, which-12)
advmod(doubles-15, more-13)
case(more-13, than-14)
acl:relcl(system-10, doubles-15)
det(area-17, the-16)
dobj(doubles-15, area-17)
case(curve-21, under-18)
det(curve-21, the-19)
amod(curve-21, precision-recall-20)
nmod:under(doubles-15, curve-21)
amod(curve-21, relative-22)
case(extractors-25, to-23)
amod(extractors-25, previous-24)
nmod:to(relative-22, extractors-25)
case(TextRunner-28, such-26)
mwe(such-26, as-27)
nmod:such_as(extractors-25, TextRunner-28)
cc(TextRunner-28, and-29)
nmod:such_as(extractors-25, woepos-30)
conj:and(TextRunner-28, woepos-30)
punct(implemented-2, .-31)

root(ROOT-0, implemented-2)
nsubj(implemented-2, We-1)
det(constraints-4, the-3)
dobj(implemented-2, constraints-4)
case(system-10, in-5)
det(system-10, the-6)
compound(system-10, ReVerb-7)
compound(system-10, Open-8)
amod(system-10, IE-9)
nmod:in(constraints-4, system-10)
ref(system-10, which-12)
advmod(doubles-15, more-13)
case(more-13, than-14)
acl:relcl(system-10, doubles-15)
det(area-17, the-16)
dobj(doubles-15, area-17)
case(curve-21, under-18)
det(curve-21, the-19)
amod(curve-21, precision-recall-20)
nmod:under(doubles-15, curve-21)
amod(curve-21, relative-22)
case(extractors-25, to-23)
amod(extractors-25, previous-24)
nmod:to(relative-22, extractors-25)
case(TextRunner-28, such-26)
mwe(such-26, as-27)
nmod:such_as(extractors-25, TextRunner-28)
cc(TextRunner-28, and-29)
conj:and(TextRunner-28, woepos-30)

root(ROOT-0, doubles-15)
case(system-10, in-5)
det(system-10, the-6)
compound(system-10, ReVerb-7)
compound(system-10, Open-8)
amod(system-10, IE-9)
nsubj(doubles-15, system-10)
ref(system-10, which-12)
advmod(doubles-15, more-13)
case(more-13, than-14)
det(area-17, the-16)
dobj(doubles-15, area-17)
case(curve-21, under-18)
det(curve-21, the-19)
amod(curve-21, precision-recall-20)
nmod:under(doubles-15, curve-21)
amod(curve-21, relative-22)
case(extractors-25, to-23)
amod(extractors-25, previous-24)
nmod:to(relative-22, extractors-25)
case(TextRunner-28, such-26)
mwe(such-26, as-27)
nmod:such_as(extractors-25, TextRunner-28)
cc(TextRunner-28, and-29)
conj:and(TextRunner-28, woepos-30)


Sentence #5: More than 30% of ReVerb's extractions are at precision 0.8 or higher---compared to virtually none for earlier systems.
root(ROOT-0, precision-11)
advmod(30-3, More-1)
mwe(More-1, than-2)
nummod(%-4, 30-3)
nsubj(precision-11, %-4)
nsubj(higher-14, %-4)
case(extractions-8, of-5)
nmod:poss(extractions-8, ReVerb-6)
case(ReVerb-6, 's-7)
nmod:of(%-4, extractions-8)
cop(precision-11, are-9)
case(precision-11, at-10)
nummod(precision-11, 0.8-12)
cc(precision-11, or-13)
conj:or(precision-11, higher-14)
punct(precision-11, ---15)
case(none-19, compared-16)
case(none-19, to-17)
advmod(none-19, virtually-18)
nmod:to(precision-11, none-19)
case(systems-22, for-20)
amod(systems-22, earlier-21)
nmod:for(none-19, systems-22)
punct(precision-11, .-23)

root(ROOT-0, precision-11)
advmod(30-3, More-1)
mwe(More-1, than-2)
nummod(%-4, 30-3)
nsubj(precision-11, %-4)
case(extractions-8, of-5)
nmod:poss(extractions-8, ReVerb-6)
case(ReVerb-6, 's-7)
nmod:of(%-4, extractions-8)
cop(precision-11, are-9)
case(precision-11, at-10)
nummod(precision-11, 0.8-12)
cc(precision-11, or-13)
conj:or(precision-11, higher-14)
case(none-19, compared-16)
mwe(compared-16, to-17)
advmod(none-19, virtually-18)
nmod:compared_to(precision-11, none-19)
case(systems-22, for-20)
amod(systems-22, earlier-21)
nmod:for(none-19, systems-22)

root(ROOT-0, higher-14)
advmod(30-3, More-1)
mwe(More-1, than-2)
nummod(%-4, 30-3)
nsubj(higher-14, %-4)
case(extractions-8, of-5)
nmod:poss(extractions-8, ReVerb-6)
case(ReVerb-6, 's-7)
nmod:of(%-4, extractions-8)


Sentence #6: The paper concludes with a detailed analysis of ReVerb's errors, suggesting directions for future work.
root(ROOT-0, concludes-3)
det(paper-2, The-1)
nsubj(concludes-3, paper-2)
case(analysis-7, with-4)
det(analysis-7, a-5)
amod(analysis-7, detailed-6)
nmod:with(concludes-3, analysis-7)
case(errors-11, of-8)
nmod:poss(errors-11, ReVerb-9)
case(ReVerb-9, 's-10)
nmod:of(analysis-7, errors-11)
punct(concludes-3, ,-12)
xcomp(concludes-3, suggesting-13)
dobj(suggesting-13, directions-14)
case(work-17, for-15)
amod(work-17, future-16)
nmod:for(directions-14, work-17)
punct(concludes-3, .-18)

root(ROOT-0, concludes-3)
det(paper-2, The-1)
nsubj(concludes-3, paper-2)
case(analysis-7, with-4)
det(analysis-7, a-5)
amod(analysis-7, detailed-6)
nmod:with(concludes-3, analysis-7)
case(errors-11, of-8)
nmod:poss(errors-11, ReVerb-9)
case(ReVerb-9, 's-10)
nmod:of(analysis-7, errors-11)
xcomp(concludes-3, suggesting-13)
dobj(suggesting-13, directions-14)
case(work-17, for-15)
amod(work-17, future-16)
nmod:for(directions-14, work-17)

root(ROOT-0, suggesting-13)
det(paper-2, The-1)
nsubj(suggesting-13, paper-2)
dobj(suggesting-13, directions-14)
case(work-17, for-15)
amod(work-17, future-16)
nmod:for(directions-14, work-17)

root(ROOT-0, directions-14)
nsubjpass(directions-14, suggesting-13)
case(work-17, for-15)
amod(work-17, future-16)
nmod:for(directions-14, work-17)


--------------------File:./data/www2013.txt----------------

Sentence #1: We propose ClausIE, a novel, clause-based approach to open information extraction, which extracts relations and their arguments from natural language text.
root(ROOT-0, propose-2)
nsubj(propose-2, We-1)
dobj(propose-2, ClausIE-3)
punct(ClausIE-3, ,-4)
det(approach-9, a-5)
amod(approach-9, novel-6)
punct(approach-9, ,-7)
amod(approach-9, clause-based-8)
appos(ClausIE-3, approach-9)
mark(open-11, to-10)
acl:to(approach-9, open-11)
compound(extraction-13, information-12)
dobj(open-11, extraction-13)
nsubj(extracts-16, extraction-13)
punct(extraction-13, ,-14)
ref(extraction-13, which-15)
acl:relcl(extraction-13, extracts-16)
dobj(extracts-16, relations-17)
cc(relations-17, and-18)
nmod:poss(arguments-20, their-19)
dobj(extracts-16, arguments-20)
conj:and(relations-17, arguments-20)
case(text-24, from-21)
amod(text-24, natural-22)
compound(text-24, language-23)
nmod:from(arguments-20, text-24)
punct(propose-2, .-25)

root(ROOT-0, propose-2)
nsubj(propose-2, We-1)
dobj(propose-2, ClausIE-3)
det(approach-9, a-5)
amod(approach-9, novel-6)
amod(approach-9, clause-based-8)
appos(ClausIE-3, approach-9)
mark(open-11, to-10)
acl:to(approach-9, open-11)
compound(extraction-13, information-12)
dobj(open-11, extraction-13)
ref(extraction-13, which-15)
acl:relcl(extraction-13, extracts-16)
dobj(extracts-16, relations-17)
cc(relations-17, and-18)
nmod:poss(arguments-20, their-19)
dobj(extracts-16, arguments-20)
case(text-24, from-21)
amod(text-24, natural-22)
compound(text-24, language-23)
nmod:from(arguments-20, text-24)


Sentence #2: ClausIE fundamentally differs from previous approaches in that it separates the detection of "useful" pieces of information expressed in a sentence from their representation in terms of extractions.
root(ROOT-0, differs-3)
nsubj(differs-3, ClausIE-1)
advmod(differs-3, fundamentally-2)
case(approaches-6, from-4)
amod(approaches-6, previous-5)
nmod:from(differs-3, approaches-6)
mark(separates-10, in-7)
mark(separates-10, that-8)
nsubj(separates-10, it-9)
advcl:that(differs-3, separates-10)
det(detection-12, the-11)
dobj(separates-10, detection-12)
case(pieces-17, of-13)
punct(pieces-17, ``-14)
amod(pieces-17, useful-15)
punct(pieces-17, ''-16)
nmod:of(detection-12, pieces-17)
case(information-19, of-18)
nmod:of(pieces-17, information-19)
acl(information-19, expressed-20)
case(sentence-23, in-21)
det(sentence-23, a-22)
nmod:in(expressed-20, sentence-23)
case(representation-26, from-24)
nmod:poss(representation-26, their-25)
nmod:from(sentence-23, representation-26)
case(terms-28, in-27)
nmod:in(representation-26, terms-28)
case(extractions-30, of-29)
nmod:of(terms-28, extractions-30)
punct(differs-3, .-31)

root(ROOT-0, differs-3)
nsubj(differs-3, ClausIE-1)
advmod(differs-3, fundamentally-2)
case(approaches-6, from-4)
amod(approaches-6, previous-5)
nmod:from(differs-3, approaches-6)
mark(separates-10, in-7)
mark(separates-10, that-8)
nsubj(separates-10, it-9)
advcl:that(differs-3, separates-10)
det(detection-12, the-11)
dobj(separates-10, detection-12)
case(pieces-17, of-13)
amod(pieces-17, useful-15)
nmod:of(detection-12, pieces-17)
case(information-19, of-18)
nmod:of(pieces-17, information-19)
acl(information-19, expressed-20)
case(sentence-23, in-21)
det(sentence-23, a-22)
nmod:in(expressed-20, sentence-23)
case(representation-26, from-24)
nmod:poss(representation-26, their-25)
nmod:from(sentence-23, representation-26)
case(terms-28, in-27)
nmod:in(representation-26, terms-28)
case(extractions-30, of-29)
nmod:of(terms-28, extractions-30)

root(ROOT-0, separates-10)
mark(separates-10, in-7)
mark(separates-10, that-8)
nsubj(separates-10, it-9)
det(detection-12, the-11)
dobj(separates-10, detection-12)
case(pieces-17, of-13)
amod(pieces-17, useful-15)
nmod:of(detection-12, pieces-17)
case(information-19, of-18)
nmod:of(pieces-17, information-19)
acl(information-19, expressed-20)
case(sentence-23, in-21)
det(sentence-23, a-22)
nmod:in(expressed-20, sentence-23)
case(representation-26, from-24)
nmod:poss(representation-26, their-25)
nmod:from(sentence-23, representation-26)
case(terms-28, in-27)
nmod:in(representation-26, terms-28)
case(extractions-30, of-29)
nmod:of(terms-28, extractions-30)

root(ROOT-0, detection-12)
nsubj(detection-12, it-9)
det(detection-12, the-11)
case(pieces-17, of-13)
amod(pieces-17, useful-15)
nmod:of(detection-12, pieces-17)
case(information-19, of-18)
nmod:of(pieces-17, information-19)
acl(information-19, expressed-20)
case(sentence-23, in-21)
det(sentence-23, a-22)
nmod:in(expressed-20, sentence-23)
case(representation-26, from-24)
nmod:poss(representation-26, their-25)
nmod:from(sentence-23, representation-26)
case(terms-28, in-27)
nmod:in(representation-26, terms-28)
case(extractions-30, of-29)
nmod:of(terms-28, extractions-30)


Sentence #3: In more detail, ClausIE exploits linguistic knowledge about the grammar of the English language to first detect clauses in an input sentence and to subsequently identify the type of each clause according to the grammatical function of its constituents.
root(ROOT-0, exploits-6)
case(detail-3, In-1)
amod(detail-3, more-2)
nmod:in(exploits-6, detail-3)
punct(exploits-6, ,-4)
nsubj(exploits-6, ClausIE-5)
amod(knowledge-8, linguistic-7)
dobj(exploits-6, knowledge-8)
case(grammar-11, about-9)
det(grammar-11, the-10)
nmod:about(knowledge-8, grammar-11)
case(language-15, of-12)
det(language-15, the-13)
compound(language-15, English-14)
nmod:of(grammar-11, language-15)
case(clauses-19, to-16)
amod(clauses-19, first-17)
amod(clauses-19, detect-18)
nmod:to(exploits-6, clauses-19)
case(sentence-23, in-20)
det(sentence-23, an-21)
compound(sentence-23, input-22)
nmod:in(clauses-19, sentence-23)
cc(clauses-19, and-24)
mark(identify-27, to-25)
advmod(identify-27, subsequently-26)
nmod:to(exploits-6, identify-27)
conj:and(clauses-19, identify-27)
det(type-29, the-28)
dobj(identify-27, type-29)
case(clause-32, of-30)
det(clause-32, each-31)
nmod:of(type-29, clause-32)
case(function-37, according-33)
mwe(according-33, to-34)
det(function-37, the-35)
amod(function-37, grammatical-36)
nmod:according_to(identify-27, function-37)
case(constituents-40, of-38)
nmod:poss(constituents-40, its-39)
nmod:of(function-37, constituents-40)
punct(exploits-6, .-41)

root(ROOT-0, exploits-6)
case(detail-3, In-1)
amod(detail-3, more-2)
nmod:in(exploits-6, detail-3)
nsubj(exploits-6, ClausIE-5)
amod(knowledge-8, linguistic-7)
dobj(exploits-6, knowledge-8)
case(grammar-11, about-9)
det(grammar-11, the-10)
nmod:about(knowledge-8, grammar-11)
case(language-15, of-12)
det(language-15, the-13)
compound(language-15, English-14)
nmod:of(grammar-11, language-15)
case(clauses-19, to-16)
amod(clauses-19, first-17)
amod(clauses-19, detect-18)
nmod:to(exploits-6, clauses-19)
case(sentence-23, in-20)
det(sentence-23, an-21)
compound(sentence-23, input-22)
nmod:in(clauses-19, sentence-23)
cc(clauses-19, and-24)
mark(identify-27, to-25)
advmod(identify-27, subsequently-26)
conj:and(clauses-19, identify-27)
det(type-29, the-28)
dobj(identify-27, type-29)
case(clause-32, of-30)
det(clause-32, each-31)
nmod:of(type-29, clause-32)
case(function-37, according-33)
mwe(according-33, to-34)
det(function-37, the-35)
amod(function-37, grammatical-36)
nmod:according_to(identify-27, function-37)
case(constituents-40, of-38)
nmod:poss(constituents-40, its-39)
nmod:of(function-37, constituents-40)

root(ROOT-0, identify-27)
mark(identify-27, to-25)
advmod(identify-27, subsequently-26)
det(type-29, the-28)
dobj(identify-27, type-29)
case(clause-32, of-30)
det(clause-32, each-31)
nmod:of(type-29, clause-32)
case(function-37, according-33)
mwe(according-33, to-34)
det(function-37, the-35)
amod(function-37, grammatical-36)
nmod:according_to(identify-27, function-37)
case(constituents-40, of-38)
nmod:poss(constituents-40, its-39)
nmod:of(function-37, constituents-40)

root(ROOT-0, grammar-11)
amod(knowledge-8, linguistic-7)
nsubjpass(grammar-11, knowledge-8)
case(grammar-11, about-9)
det(grammar-11, the-10)
case(language-15, of-12)
det(language-15, the-13)
compound(language-15, English-14)
nmod:of(grammar-11, language-15)

root(ROOT-0, grammar-11)
amod(knowledge-8, linguistic-7)
nsubjpass(grammar-11, knowledge-8)
case(grammar-11, about-9)
det(grammar-11, the-10)
case(language-15, of-12)
det(language-15, the-13)
compound(language-15, English-14)
nmod:of(grammar-11, language-15)

root(ROOT-0, function-37)
det(type-29, the-28)
nsubj(function-37, type-29)
case(clause-32, of-30)
det(clause-32, each-31)
nmod:of(type-29, clause-32)
case(function-37, according-33)
mwe(according-33, to-34)
det(function-37, the-35)
amod(function-37, grammatical-36)
case(constituents-40, of-38)
nmod:poss(constituents-40, its-39)
nmod:of(function-37, constituents-40)


Sentence #4: Based on this information, ClausIE is able to generate high-precision extractions; the representation of these extractions can be flexibly customized to the underlying application.
root(ROOT-0, able-8)
case(information-4, Based-1)
case(information-4, on-2)
det(information-4, this-3)
advcl:on(able-8, information-4)
punct(able-8, ,-5)
nsubj(able-8, ClausIE-6)
nsubj:xsubj(generate-10, ClausIE-6)
cop(able-8, is-7)
mark(generate-10, to-9)
xcomp(able-8, generate-10)
compound(extractions-12, high-precision-11)
dobj(generate-10, extractions-12)
punct(able-8, ;-13)
det(representation-15, the-14)
nsubjpass(customized-22, representation-15)
case(extractions-18, of-16)
det(extractions-18, these-17)
nmod:of(representation-15, extractions-18)
aux(customized-22, can-19)
auxpass(customized-22, be-20)
advmod(customized-22, flexibly-21)
parataxis(able-8, customized-22)
case(application-26, to-23)
det(application-26, the-24)
amod(application-26, underlying-25)
nmod:to(customized-22, application-26)
punct(able-8, .-27)

root(ROOT-0, able-8)
case(information-4, Based-1)
mwe(Based-1, on-2)
det(information-4, this-3)
advcl:based_on(able-8, information-4)
nsubj(able-8, ClausIE-6)
cop(able-8, is-7)
mark(generate-10, to-9)
xcomp(able-8, generate-10)
compound(extractions-12, high-precision-11)
dobj(generate-10, extractions-12)
det(representation-15, the-14)
nsubjpass(customized-22, representation-15)
case(extractions-18, of-16)
det(extractions-18, these-17)
nmod:of(representation-15, extractions-18)
aux(customized-22, can-19)
auxpass(customized-22, be-20)
advmod(customized-22, flexibly-21)
parataxis(able-8, customized-22)
case(application-26, to-23)
det(application-26, the-24)
amod(application-26, underlying-25)
nmod:to(customized-22, application-26)

root(ROOT-0, generate-10)
nsubj(generate-10, ClausIE-6)
compound(extractions-12, high-precision-11)
dobj(generate-10, extractions-12)

root(ROOT-0, customized-22)
det(representation-15, the-14)
nsubjpass(customized-22, representation-15)
case(extractions-18, of-16)
det(extractions-18, these-17)
nmod:of(representation-15, extractions-18)
aux(customized-22, can-19)
auxpass(customized-22, be-20)
advmod(customized-22, flexibly-21)
case(application-26, to-23)
det(application-26, the-24)
amod(application-26, underlying-25)
nmod:to(customized-22, application-26)

root(ROOT-0, information-4)
case(information-4, Based-1)
mwe(Based-1, on-2)
det(information-4, this-3)
nsubj(information-4, ClausIE-6)


Sentence #5: ClausIE is based on dependency parsing and a small set of domain-independent lexica, operates sentence by sentence without any post-processing, and requires no training data (whether labeled or unlabeled).
root(ROOT-0, based-3)
nsubjpass(based-3, ClausIE-1)
nsubj(operates-15, ClausIE-1)
nsubj(requires-24, ClausIE-1)
auxpass(based-3, is-2)
case(parsing-6, on-4)
compound(parsing-6, dependency-5)
nmod:on(based-3, parsing-6)
cc(parsing-6, and-7)
det(set-10, a-8)
amod(set-10, small-9)
nmod:on(based-3, set-10)
conj:and(parsing-6, set-10)
case(lexica-13, of-11)
amod(lexica-13, domain-independent-12)
nmod:of(set-10, lexica-13)
punct(based-3, ,-14)
conj:and(based-3, operates-15)
dobj(operates-15, sentence-16)
case(sentence-18, by-17)
nmod:by(operates-15, sentence-18)
case(post-processing-21, without-19)
det(post-processing-21, any-20)
nmod:without(operates-15, post-processing-21)
punct(based-3, ,-22)
cc(based-3, and-23)
conj:and(based-3, requires-24)
neg(data-27, no-25)
compound(data-27, training-26)
dobj(requires-24, data-27)
punct(labeled-30, -LRB--28)
mark(labeled-30, whether-29)
dep(data-27, labeled-30)
cc(labeled-30, or-31)
dep(data-27, unlabeled-32)
conj:or(labeled-30, unlabeled-32)
punct(labeled-30, -RRB--33)
punct(based-3, .-34)

root(ROOT-0, based-3)
nsubjpass(based-3, ClausIE-1)
auxpass(based-3, is-2)
case(parsing-6, on-4)
compound(parsing-6, dependency-5)
nmod:on(based-3, parsing-6)
cc(parsing-6, and-7)
det(set-10, a-8)
amod(set-10, small-9)
conj:and(parsing-6, set-10)
case(lexica-13, of-11)
amod(lexica-13, domain-independent-12)
nmod:of(set-10, lexica-13)
conj:and(based-3, operates-15)
dobj(operates-15, sentence-16)
case(sentence-18, by-17)
nmod:by(operates-15, sentence-18)
case(post-processing-21, without-19)
det(post-processing-21, any-20)
nmod:without(operates-15, post-processing-21)
cc(based-3, and-23)
conj:and(based-3, requires-24)
neg(data-27, no-25)
compound(data-27, training-26)
dobj(requires-24, data-27)
mark(labeled-30, whether-29)
dep(data-27, labeled-30)
cc(labeled-30, or-31)
conj:or(labeled-30, unlabeled-32)

root(ROOT-0, operates-15)
nsubj(operates-15, ClausIE-1)
dobj(operates-15, sentence-16)
case(sentence-18, by-17)
nmod:by(operates-15, sentence-18)
case(post-processing-21, without-19)
det(post-processing-21, any-20)
nmod:without(operates-15, post-processing-21)

root(ROOT-0, requires-24)
nsubj(requires-24, ClausIE-1)
neg(data-27, no-25)
compound(data-27, training-26)
dobj(requires-24, data-27)
mark(labeled-30, whether-29)
dep(data-27, labeled-30)
cc(labeled-30, or-31)
conj:or(labeled-30, unlabeled-32)

root(ROOT-0, unlabeled-32)


Sentence #6: Our experimental study on various real-world datasets suggests that ClausIE obtains higher recall and higher precision than existing approaches, both on high-quality text as well as on noisy text as found in the web.
root(ROOT-0, suggests-8)
nmod:poss(study-3, Our-1)
amod(study-3, experimental-2)
nsubj(suggests-8, study-3)
case(datasets-7, on-4)
amod(datasets-7, various-5)
amod(datasets-7, real-world-6)
nmod:on(study-3, datasets-7)
mark(obtains-11, that-9)
nsubj(obtains-11, ClausIE-10)
ccomp(suggests-8, obtains-11)
amod(recall-13, higher-12)
dobj(obtains-11, recall-13)
cc(recall-13, and-14)
amod(precision-16, higher-15)
dobj(obtains-11, precision-16)
conj:and(recall-13, precision-16)
case(approaches-19, than-17)
amod(approaches-19, existing-18)
nmod:than(recall-13, approaches-19)
punct(obtains-11, ,-20)
dep(text-24, both-21)
case(text-24, on-22)
amod(text-24, high-quality-23)
nmod:on(obtains-11, text-24)
cc(text-24, as-25)
mwe(as-25, well-26)
mwe(as-25, as-27)
case(text-30, on-28)
amod(text-30, noisy-29)
nmod:on(obtains-11, text-30)
conj:and(text-24, text-30)
mark(found-32, as-31)
acl:as(text-30, found-32)
case(web-35, in-33)
det(web-35, the-34)
nmod:in(found-32, web-35)
punct(suggests-8, .-36)

root(ROOT-0, suggests-8)
nmod:poss(study-3, Our-1)
amod(study-3, experimental-2)
nsubj(suggests-8, study-3)
case(datasets-7, on-4)
amod(datasets-7, various-5)
amod(datasets-7, real-world-6)
nmod:on(study-3, datasets-7)
mark(obtains-11, that-9)
nsubj(obtains-11, ClausIE-10)
ccomp(suggests-8, obtains-11)
amod(recall-13, higher-12)
dobj(obtains-11, recall-13)
cc(recall-13, and-14)
amod(precision-16, higher-15)
dobj(obtains-11, precision-16)
case(approaches-19, than-17)
amod(approaches-19, existing-18)
nmod:than(recall-13, approaches-19)
dep(text-24, both-21)
case(text-24, on-22)
amod(text-24, high-quality-23)
nmod:on(obtains-11, text-24)
cc(obtains-11, as-25)
mwe(as-25, well-26)
mwe(as-25, as-27)
case(text-30, on-28)
amod(text-30, noisy-29)
nmod:on(obtains-11, text-30)
mark(found-32, as-31)
acl:as(text-30, found-32)
case(web-35, in-33)
det(web-35, the-34)
nmod:in(found-32, web-35)

root(ROOT-0, obtains-11)
nsubj(obtains-11, ClausIE-10)
amod(recall-13, higher-12)
dobj(obtains-11, recall-13)
cc(recall-13, and-14)
amod(precision-16, higher-15)
dobj(obtains-11, precision-16)
case(approaches-19, than-17)
amod(approaches-19, existing-18)
nmod:than(recall-13, approaches-19)
dep(text-24, both-21)
case(text-24, on-22)
amod(text-24, high-quality-23)
nmod:on(obtains-11, text-24)
cc(obtains-11, as-25)
mwe(as-25, well-26)
mwe(as-25, as-27)
case(text-30, on-28)
amod(text-30, noisy-29)
nmod:on(obtains-11, text-30)
mark(found-32, as-31)
acl:as(text-30, found-32)
case(web-35, in-33)
det(web-35, the-34)
nmod:in(found-32, web-35)

root(ROOT-0, recall-13)
nsubj(recall-13, ClausIE-10)
amod(recall-13, higher-12)
cc(recall-13, and-14)
amod(precision-16, higher-15)
conj:and(recall-13, precision-16)
case(approaches-19, than-17)
amod(approaches-19, existing-18)
nmod:than(recall-13, approaches-19)

root(ROOT-0, text-30)
nsubj(text-30, ClausIE-10)
case(text-30, on-28)
amod(text-30, noisy-29)
mark(found-32, as-31)
acl:as(text-30, found-32)
case(web-35, in-33)
det(web-35, the-34)
nmod:in(found-32, web-35)

root(ROOT-0, precision-16)
nsubj(precision-16, ClausIE-10)
amod(precision-16, higher-15)

root(ROOT-0, precision-16)
amod(recall-13, higher-12)
nsubj(precision-16, recall-13)
cc(recall-13, and-14)
amod(precision-16, higher-15)
case(approaches-19, than-17)
amod(approaches-19, existing-18)
nmod:than(recall-13, approaches-19)


--------------------File:./data/ecir2014..txt----------------

Sentence #1: Recent Open Information Extraction OpenIE systems utilize grammatical structure to extract facts with very high recall and good precision.
root(ROOT-0, utilize-7)
amod(systems-6, Recent-1)
compound(systems-6, Open-2)
compound(systems-6, Information-3)
compound(systems-6, Extraction-4)
compound(systems-6, OpenIE-5)
nsubj(utilize-7, systems-6)
amod(structure-9, grammatical-8)
dobj(utilize-7, structure-9)
case(facts-12, to-10)
compound(facts-12, extract-11)
nmod:to(utilize-7, facts-12)
case(recall-16, with-13)
advmod(high-15, very-14)
amod(recall-16, high-15)
nmod:with(facts-12, recall-16)
cc(recall-16, and-17)
amod(precision-19, good-18)
nmod:with(facts-12, precision-19)
conj:and(recall-16, precision-19)
punct(utilize-7, .-20)

root(ROOT-0, utilize-7)
amod(systems-6, Recent-1)
compound(systems-6, Open-2)
compound(systems-6, Information-3)
compound(systems-6, Extraction-4)
compound(systems-6, OpenIE-5)
nsubj(utilize-7, systems-6)
amod(structure-9, grammatical-8)
dobj(utilize-7, structure-9)
case(facts-12, to-10)
compound(facts-12, extract-11)
nmod:to(utilize-7, facts-12)
case(recall-16, with-13)
advmod(high-15, very-14)
amod(recall-16, high-15)
nmod:with(facts-12, recall-16)
cc(recall-16, and-17)
amod(precision-19, good-18)
conj:and(recall-16, precision-19)


Sentence #2: In this paper, we point out that a significant fraction of the extracted facts is, however, not informative.
root(ROOT-0, point-6)
case(paper-3, In-1)
det(paper-3, this-2)
nmod:in(point-6, paper-3)
punct(point-6, ,-4)
nsubj(point-6, we-5)
compound:prt(point-6, out-7)
mark(informative-21, that-8)
det(fraction-11, a-9)
amod(fraction-11, significant-10)
nsubj(informative-21, fraction-11)
case(facts-15, of-12)
det(facts-15, the-13)
amod(facts-15, extracted-14)
nmod:of(fraction-11, facts-15)
cop(informative-21, is-16)
punct(informative-21, ,-17)
advmod(informative-21, however-18)
punct(informative-21, ,-19)
neg(informative-21, not-20)
ccomp(point-6, informative-21)
punct(point-6, .-22)

root(ROOT-0, point-6)
case(paper-3, In-1)
det(paper-3, this-2)
nmod:in(point-6, paper-3)
nsubj(point-6, we-5)
compound:prt(point-6, out-7)
mark(informative-21, that-8)
det(fraction-11, a-9)
amod(fraction-11, significant-10)
nsubj(informative-21, fraction-11)
case(facts-15, of-12)
det(facts-15, the-13)
amod(facts-15, extracted-14)
nmod:of(fraction-11, facts-15)
cop(informative-21, is-16)
advmod(informative-21, however-18)
neg(informative-21, not-20)
ccomp(point-6, informative-21)

root(ROOT-0, informative-21)
det(fraction-11, a-9)
amod(fraction-11, significant-10)
nsubj(informative-21, fraction-11)
case(facts-15, of-12)
det(facts-15, the-13)
amod(facts-15, extracted-14)
nmod:of(fraction-11, facts-15)
cop(informative-21, is-16)
advmod(informative-21, however-18)
neg(informative-21, not-20)


Sentence #3: For example, for the sentence The ICRW is a non-profit organization headquartered in Washington, the extracted fact a non-profit organization is headquartered in Washington is not informative.
root(ROOT-0, organization-12)
case(example-2, For-1)
nmod:for(organization-12, example-2)
punct(organization-12, ,-3)
case(sentence-6, for-4)
det(sentence-6, the-5)
nmod:for(organization-12, sentence-6)
det(ICRW-8, The-7)
nsubj(organization-12, ICRW-8)
cop(organization-12, is-9)
det(organization-12, a-10)
amod(organization-12, non-profit-11)
acl(organization-12, headquartered-13)
case(Washington-15, in-14)
nmod:in(headquartered-13, Washington-15)
punct(organization-12, ,-16)
det(fact-19, the-17)
amod(fact-19, extracted-18)
nsubj(informative-29, fact-19)
det(organization-22, a-20)
amod(organization-22, non-profit-21)
nsubjpass(headquartered-24, organization-22)
auxpass(headquartered-24, is-23)
acl:relcl(fact-19, headquartered-24)
case(Washington-26, in-25)
nmod:in(headquartered-24, Washington-26)
cop(informative-29, is-27)
neg(informative-29, not-28)
parataxis(organization-12, informative-29)
punct(organization-12, .-30)

root(ROOT-0, organization-12)
case(example-2, For-1)
nmod:for(organization-12, example-2)
case(sentence-6, for-4)
det(sentence-6, the-5)
nmod:for(organization-12, sentence-6)
det(ICRW-8, The-7)
nsubj(organization-12, ICRW-8)
cop(organization-12, is-9)
det(organization-12, a-10)
amod(organization-12, non-profit-11)
acl(organization-12, headquartered-13)
case(Washington-15, in-14)
nmod:in(headquartered-13, Washington-15)
det(fact-19, the-17)
amod(fact-19, extracted-18)
nsubj(informative-29, fact-19)
det(organization-22, a-20)
amod(organization-22, non-profit-21)
nsubjpass(headquartered-24, organization-22)
auxpass(headquartered-24, is-23)
acl:relcl(fact-19, headquartered-24)
case(Washington-26, in-25)
nmod:in(headquartered-24, Washington-26)
cop(informative-29, is-27)
neg(informative-29, not-28)
parataxis(organization-12, informative-29)

root(ROOT-0, informative-29)
det(fact-19, the-17)
amod(fact-19, extracted-18)
nsubj(informative-29, fact-19)
det(organization-22, a-20)
amod(organization-22, non-profit-21)
nsubjpass(headquartered-24, organization-22)
auxpass(headquartered-24, is-23)
acl:relcl(fact-19, headquartered-24)
case(Washington-26, in-25)
nmod:in(headquartered-24, Washington-26)
cop(informative-29, is-27)
neg(informative-29, not-28)

root(ROOT-0, headquartered-24)
det(organization-22, a-20)
amod(organization-22, non-profit-21)
nsubjpass(headquartered-24, organization-22)
auxpass(headquartered-24, is-23)
case(Washington-26, in-25)
nmod:in(headquartered-24, Washington-26)


Sentence #4: This is a problem for semantic search applications utilizing these triples, which is hard to fix once the triple extraction is completed.
root(ROOT-0, problem-4)
nsubj(problem-4, This-1)
cop(problem-4, is-2)
det(problem-4, a-3)
case(applications-8, for-5)
amod(applications-8, semantic-6)
compound(applications-8, search-7)
nmod:for(problem-4, applications-8)
acl(applications-8, utilizing-9)
det(triples-11, these-10)
dobj(utilizing-9, triples-11)
nsubj(hard-15, triples-11)
nsubj:xsubj(fix-17, triples-11)
punct(triples-11, ,-12)
ref(triples-11, which-13)
cop(hard-15, is-14)
acl:relcl(triples-11, hard-15)
mark(fix-17, to-16)
xcomp(hard-15, fix-17)
advmod(completed-23, once-18)
det(extraction-21, the-19)
amod(extraction-21, triple-20)
nsubjpass(completed-23, extraction-21)
auxpass(completed-23, is-22)
ccomp(fix-17, completed-23)
punct(problem-4, .-24)

root(ROOT-0, problem-4)
nsubj(problem-4, This-1)
cop(problem-4, is-2)
det(problem-4, a-3)
case(applications-8, for-5)
amod(applications-8, semantic-6)
compound(applications-8, search-7)
nmod:for(problem-4, applications-8)
acl(applications-8, utilizing-9)
det(triples-11, these-10)
dobj(utilizing-9, triples-11)
ref(triples-11, which-13)
cop(hard-15, is-14)
acl:relcl(triples-11, hard-15)
mark(fix-17, to-16)
xcomp(hard-15, fix-17)
advmod(completed-23, once-18)
det(extraction-21, the-19)
amod(extraction-21, triple-20)
nsubjpass(completed-23, extraction-21)
auxpass(completed-23, is-22)
ccomp(fix-17, completed-23)

root(ROOT-0, hard-15)
det(triples-11, these-10)
nsubj(hard-15, triples-11)
ref(triples-11, which-13)
cop(hard-15, is-14)
mark(fix-17, to-16)
xcomp(hard-15, fix-17)
advmod(completed-23, once-18)
det(extraction-21, the-19)
amod(extraction-21, triple-20)
nsubjpass(completed-23, extraction-21)
auxpass(completed-23, is-22)
ccomp(fix-17, completed-23)

root(ROOT-0, fix-17)
det(triples-11, these-10)
nsubj:xsubj(fix-17, triples-11)
ref(triples-11, which-13)
cop(hard-15, is-14)
acl:relcl(triples-11, hard-15)
advmod(completed-23, once-18)
det(extraction-21, the-19)
amod(extraction-21, triple-20)
nsubjpass(completed-23, extraction-21)
auxpass(completed-23, is-22)
ccomp(fix-17, completed-23)

root(ROOT-0, completed-23)
advmod(completed-23, once-18)
det(extraction-21, the-19)
amod(extraction-21, triple-20)
nsubjpass(completed-23, extraction-21)
auxpass(completed-23, is-22)


Sentence #5: We therefore propose to integrate a set of simple inference rules into the extraction process.
root(ROOT-0, propose-3)
nsubj(propose-3, We-1)
nsubj:xsubj(integrate-5, We-1)
advmod(propose-3, therefore-2)
mark(integrate-5, to-4)
xcomp(propose-3, integrate-5)
det(set-7, a-6)
dobj(integrate-5, set-7)
case(rules-11, of-8)
amod(rules-11, simple-9)
compound(rules-11, inference-10)
nmod:of(set-7, rules-11)
case(process-15, into-12)
det(process-15, the-13)
compound(process-15, extraction-14)
nmod:into(set-7, process-15)
punct(propose-3, .-16)

root(ROOT-0, propose-3)
nsubj(propose-3, We-1)
advmod(propose-3, therefore-2)
mark(integrate-5, to-4)
xcomp(propose-3, integrate-5)
det(set-7, a-6)
dobj(integrate-5, set-7)
case(rules-11, of-8)
amod(rules-11, simple-9)
compound(rules-11, inference-10)
nmod:of(set-7, rules-11)
case(process-15, into-12)
det(process-15, the-13)
compound(process-15, extraction-14)
nmod:into(set-7, process-15)

root(ROOT-0, integrate-5)
nsubj(integrate-5, We-1)
det(set-7, a-6)
dobj(integrate-5, set-7)
case(rules-11, of-8)
amod(rules-11, simple-9)
compound(rules-11, inference-10)
nmod:of(set-7, rules-11)
case(process-15, into-12)
det(process-15, the-13)
compound(process-15, extraction-14)
nmod:into(set-7, process-15)


Sentence #6: Our evaluation shows that, even with these simple rules, the percentage of informative triples can be improved considerably and the already high recall can be improved even further.
root(ROOT-0, shows-3)
nmod:poss(evaluation-2, Our-1)
nsubj(shows-3, evaluation-2)
mark(improved-19, that-4)
punct(improved-19, ,-5)
advmod(rules-10, even-6)
case(rules-10, with-7)
det(rules-10, these-8)
amod(rules-10, simple-9)
nmod:with(improved-19, rules-10)
punct(improved-19, ,-11)
det(percentage-13, the-12)
nsubjpass(improved-19, percentage-13)
case(triples-16, of-14)
amod(triples-16, informative-15)
nmod:of(percentage-13, triples-16)
aux(improved-19, can-17)
auxpass(improved-19, be-18)
ccomp(shows-3, improved-19)
advmod(improved-19, considerably-20)
cc(improved-19, and-21)
det(recall-25, the-22)
advmod(high-24, already-23)
amod(recall-25, high-24)
nsubjpass(improved-28, recall-25)
aux(improved-28, can-26)
auxpass(improved-28, be-27)
ccomp(shows-3, improved-28)
conj:and(improved-19, improved-28)
advmod(further-30, even-29)
advmod(improved-28, further-30)
punct(shows-3, .-31)

root(ROOT-0, shows-3)
nmod:poss(evaluation-2, Our-1)
nsubj(shows-3, evaluation-2)
mark(improved-19, that-4)
advmod(rules-10, even-6)
case(rules-10, with-7)
det(rules-10, these-8)
amod(rules-10, simple-9)
nmod:with(improved-19, rules-10)
det(percentage-13, the-12)
nsubjpass(improved-19, percentage-13)
case(triples-16, of-14)
amod(triples-16, informative-15)
nmod:of(percentage-13, triples-16)
aux(improved-19, can-17)
auxpass(improved-19, be-18)
ccomp(shows-3, improved-19)
advmod(improved-19, considerably-20)
cc(improved-19, and-21)
det(recall-25, the-22)
advmod(high-24, already-23)
amod(recall-25, high-24)
nsubjpass(improved-28, recall-25)
aux(improved-28, can-26)
auxpass(improved-28, be-27)
conj:and(improved-19, improved-28)
advmod(further-30, even-29)
advmod(improved-28, further-30)

root(ROOT-0, improved-19)
advmod(rules-10, even-6)
case(rules-10, with-7)
det(rules-10, these-8)
amod(rules-10, simple-9)
nmod:with(improved-19, rules-10)
det(percentage-13, the-12)
nsubjpass(improved-19, percentage-13)
case(triples-16, of-14)
amod(triples-16, informative-15)
nmod:of(percentage-13, triples-16)
auxpass(improved-19, be-18)
advmod(improved-19, considerably-20)
cc(improved-19, and-21)
det(recall-25, the-22)
advmod(high-24, already-23)
amod(recall-25, high-24)
nsubjpass(improved-28, recall-25)
aux(improved-28, can-26)
auxpass(improved-28, be-27)
conj:and(improved-19, improved-28)
advmod(further-30, even-29)
advmod(improved-28, further-30)

root(ROOT-0, improved-28)
det(recall-25, the-22)
advmod(high-24, already-23)
amod(recall-25, high-24)
nsubjpass(improved-28, recall-25)
aux(improved-28, can-26)
auxpass(improved-28, be-27)
advmod(further-30, even-29)
advmod(improved-28, further-30)


Sentence #7: Both improvements directly increase the quality of search on these triples.
root(ROOT-0, increase-4)
det(improvements-2, Both-1)
nsubj(increase-4, improvements-2)
advmod(increase-4, directly-3)
det(quality-6, the-5)
dobj(increase-4, quality-6)
case(search-8, of-7)
nmod:of(quality-6, search-8)
case(triples-11, on-9)
det(triples-11, these-10)
nmod:on(search-8, triples-11)
punct(increase-4, .-12)

root(ROOT-0, increase-4)
det(improvements-2, Both-1)
nsubj(increase-4, improvements-2)
advmod(increase-4, directly-3)
det(quality-6, the-5)
dobj(increase-4, quality-6)
case(search-8, of-7)
nmod:of(quality-6, search-8)
case(triples-11, on-9)
det(triples-11, these-10)
nmod:on(search-8, triples-11)


--------------------File:./data/acl2010.txt----------------

Sentence #1: Information-extraction (IE) systems seek to distill semantic relations from natural-language text, but most systems use supervised learning of relation-specific examples and are thus limited by the availability of training data.
root(ROOT-0, seek-6)
compound(systems-5, Information-extraction-1)
punct(IE-3, -LRB--2)
appos(Information-extraction-1, IE-3)
punct(IE-3, -RRB--4)
nsubj(seek-6, systems-5)
nsubj:xsubj(distill-8, systems-5)
mark(distill-8, to-7)
xcomp(seek-6, distill-8)
amod(relations-10, semantic-9)
dobj(distill-8, relations-10)
case(text-13, from-11)
amod(text-13, natural-language-12)
nmod:from(relations-10, text-13)
punct(seek-6, ,-14)
cc(seek-6, but-15)
amod(systems-17, most-16)
nsubj(use-18, systems-17)
nsubjpass(limited-27, systems-17)
conj:but(seek-6, use-18)
amod(learning-20, supervised-19)
dobj(use-18, learning-20)
case(examples-23, of-21)
amod(examples-23, relation-specific-22)
nmod:of(learning-20, examples-23)
cc(use-18, and-24)
auxpass(limited-27, are-25)
advmod(limited-27, thus-26)
conj:but(seek-6, limited-27)
conj:and(use-18, limited-27)
case(availability-30, by-28)
det(availability-30, the-29)
nmod:agent(limited-27, availability-30)
case(data-33, of-31)
compound(data-33, training-32)
nmod:of(availability-30, data-33)
punct(seek-6, .-34)

root(ROOT-0, seek-6)
compound(systems-5, Information-extraction-1)
appos(Information-extraction-1, IE-3)
nsubj(seek-6, systems-5)
mark(distill-8, to-7)
xcomp(seek-6, distill-8)
amod(relations-10, semantic-9)
dobj(distill-8, relations-10)
case(text-13, from-11)
amod(text-13, natural-language-12)
nmod:from(relations-10, text-13)
cc(seek-6, but-15)
amod(systems-17, most-16)
nsubj(use-18, systems-17)
conj:but(seek-6, use-18)
amod(learning-20, supervised-19)
dobj(use-18, learning-20)
case(examples-23, of-21)
amod(examples-23, relation-specific-22)
nmod:of(learning-20, examples-23)
cc(use-18, and-24)
auxpass(limited-27, are-25)
advmod(limited-27, thus-26)
conj:and(use-18, limited-27)
case(availability-30, by-28)
det(availability-30, the-29)
nmod:agent(limited-27, availability-30)
case(data-33, of-31)
compound(data-33, training-32)
nmod:of(availability-30, data-33)

root(ROOT-0, use-18)
amod(systems-17, most-16)
nsubj(use-18, systems-17)
amod(learning-20, supervised-19)
dobj(use-18, learning-20)
case(examples-23, of-21)
amod(examples-23, relation-specific-22)
nmod:of(learning-20, examples-23)
cc(use-18, and-24)
auxpass(limited-27, are-25)
advmod(limited-27, thus-26)
conj:and(use-18, limited-27)
case(availability-30, by-28)
det(availability-30, the-29)
nmod:agent(limited-27, availability-30)
case(data-33, of-31)
compound(data-33, training-32)
nmod:of(availability-30, data-33)

root(ROOT-0, distill-8)
compound(systems-5, Information-extraction-1)
appos(Information-extraction-1, IE-3)
nsubj(distill-8, systems-5)
amod(relations-10, semantic-9)
dobj(distill-8, relations-10)
case(text-13, from-11)
amod(text-13, natural-language-12)
nmod:from(relations-10, text-13)

root(ROOT-0, limited-27)
amod(systems-17, most-16)
nsubj(limited-27, systems-17)
auxpass(limited-27, are-25)
advmod(limited-27, thus-26)
case(availability-30, by-28)
det(availability-30, the-29)
nmod:agent(limited-27, availability-30)
case(data-33, of-31)
compound(data-33, training-32)
nmod:of(availability-30, data-33)

root(ROOT-0, learning-20)
amod(systems-17, most-16)
nsubj(learning-20, systems-17)
amod(learning-20, supervised-19)
case(examples-23, of-21)
amod(examples-23, relation-specific-22)
nmod:of(learning-20, examples-23)


Sentence #2: Open IE systems such as TextRunner, on the other hand, aim to handle the unbounded number of relations found on the Web.
root(ROOT-0, Open-1)
amod(systems-3, IE-2)
dobj(Open-1, systems-3)
case(TextRunner-6, such-4)
mwe(such-4, as-5)
nmod:such_as(systems-3, TextRunner-6)
punct(Open-1, ,-7)
case(hand-11, on-8)
det(hand-11, the-9)
amod(hand-11, other-10)
nmod:on(Open-1, hand-11)
punct(Open-1, ,-12)
dobj(Open-1, aim-13)
mark(handle-15, to-14)
acl:to(aim-13, handle-15)
det(number-18, the-16)
amod(number-18, unbounded-17)
dobj(handle-15, number-18)
case(relations-20, of-19)
nmod:of(number-18, relations-20)
acl(relations-20, found-21)
case(Web-24, on-22)
det(Web-24, the-23)
nmod:on(found-21, Web-24)
punct(Open-1, .-25)

root(ROOT-0, Open-1)
amod(systems-3, IE-2)
dobj(Open-1, systems-3)
case(TextRunner-6, such-4)
mwe(such-4, as-5)
nmod:such_as(systems-3, TextRunner-6)
case(hand-11, on-8)
det(hand-11, the-9)
amod(hand-11, other-10)
nmod:on(Open-1, hand-11)
dobj(Open-1, aim-13)
mark(handle-15, to-14)
acl:to(aim-13, handle-15)
det(number-18, the-16)
amod(number-18, unbounded-17)
dobj(handle-15, number-18)
case(relations-20, of-19)
nmod:of(number-18, relations-20)
acl(relations-20, found-21)
case(Web-24, on-22)
det(Web-24, the-23)
nmod:on(found-21, Web-24)

root(ROOT-0, handle-15)
nsubjpass(handle-15, aim-13)
mark(handle-15, to-14)
det(number-18, the-16)
amod(number-18, unbounded-17)
dobj(handle-15, number-18)
case(relations-20, of-19)
nmod:of(number-18, relations-20)
acl(relations-20, found-21)
case(Web-24, on-22)
det(Web-24, the-23)
nmod:on(found-21, Web-24)


Sentence #3: But how well can these open systems perform?
root(ROOT-0, perform-8)
cc(perform-8, But-1)
advmod(well-3, how-2)
advmod(perform-8, well-3)
aux(perform-8, can-4)
det(systems-7, these-5)
amod(systems-7, open-6)
nsubj(perform-8, systems-7)
punct(perform-8, ?-9)

root(ROOT-0, perform-8)
cc(perform-8, But-1)
advmod(well-3, how-2)
advmod(perform-8, well-3)
aux(perform-8, can-4)
det(systems-7, these-5)
amod(systems-7, open-6)
nsubj(perform-8, systems-7)


Sentence #4: This paper presents WOE, an open IE system which improves dramatically on TextRunner's precision and recall.
root(ROOT-0, presents-3)
det(paper-2, This-1)
nsubj(presents-3, paper-2)
dobj(presents-3, WOE-4)
punct(WOE-4, ,-5)
det(system-9, an-6)
amod(system-9, open-7)
amod(system-9, IE-8)
appos(WOE-4, system-9)
nsubj(improves-11, system-9)
ref(system-9, which-10)
acl:relcl(system-9, improves-11)
advmod(improves-11, dramatically-12)
case(precision-16, on-13)
nmod:poss(precision-16, TextRunner-14)
case(TextRunner-14, 's-15)
nmod:on(improves-11, precision-16)
cc(precision-16, and-17)
nmod:on(improves-11, recall-18)
conj:and(precision-16, recall-18)
punct(presents-3, .-19)

root(ROOT-0, presents-3)
det(paper-2, This-1)
nsubj(presents-3, paper-2)
dobj(presents-3, WOE-4)
det(system-9, an-6)
amod(system-9, open-7)
amod(system-9, IE-8)
appos(WOE-4, system-9)
ref(system-9, which-10)
acl:relcl(system-9, improves-11)
advmod(improves-11, dramatically-12)
case(precision-16, on-13)
nmod:poss(precision-16, TextRunner-14)
case(TextRunner-14, 's-15)
nmod:on(improves-11, precision-16)
cc(precision-16, and-17)
conj:and(precision-16, recall-18)

root(ROOT-0, improves-11)
det(system-9, an-6)
amod(system-9, open-7)
amod(system-9, IE-8)
nsubj(improves-11, system-9)
ref(system-9, which-10)
advmod(improves-11, dramatically-12)
case(precision-16, on-13)
nmod:poss(precision-16, TextRunner-14)
case(TextRunner-14, 's-15)
nmod:on(improves-11, precision-16)
cc(precision-16, and-17)
conj:and(precision-16, recall-18)


Sentence #5: The key to WOE's performance is a novel form of self-supervised learning for open extractors -- using heuristic matches between Wikipedia infobox attribute values and corresponding sentences to construct training data.
root(ROOT-0, form-10)
det(key-2, The-1)
nsubj(form-10, key-2)
case(performance-6, to-3)
nmod:poss(performance-6, WOE-4)
case(WOE-4, 's-5)
nmod:to(key-2, performance-6)
cop(form-10, is-7)
det(form-10, a-8)
amod(form-10, novel-9)
case(learning-13, of-11)
amod(learning-13, self-supervised-12)
nmod:of(form-10, learning-13)
case(extractors-16, for-14)
amod(extractors-16, open-15)
nmod:for(learning-13, extractors-16)
punct(form-10, ---17)
parataxis(form-10, using-18)
compound(matches-20, heuristic-19)
dobj(using-18, matches-20)
case(values-25, between-21)
compound(values-25, Wikipedia-22)
compound(values-25, infobox-23)
compound(values-25, attribute-24)
nmod:between(matches-20, values-25)
cc(values-25, and-26)
amod(sentences-28, corresponding-27)
nmod:between(matches-20, sentences-28)
conj:and(values-25, sentences-28)
mark(construct-30, to-29)
advcl:to(using-18, construct-30)
compound(data-32, training-31)
dobj(construct-30, data-32)
punct(form-10, .-33)

root(ROOT-0, form-10)
det(key-2, The-1)
nsubj(form-10, key-2)
case(performance-6, to-3)
nmod:poss(performance-6, WOE-4)
case(WOE-4, 's-5)
nmod:to(key-2, performance-6)
cop(form-10, is-7)
det(form-10, a-8)
amod(form-10, novel-9)
case(learning-13, of-11)
amod(learning-13, self-supervised-12)
nmod:of(form-10, learning-13)
case(extractors-16, for-14)
amod(extractors-16, open-15)
nmod:for(learning-13, extractors-16)
parataxis(form-10, using-18)
compound(matches-20, heuristic-19)
dobj(using-18, matches-20)
case(values-25, between-21)
compound(values-25, Wikipedia-22)
compound(values-25, infobox-23)
compound(values-25, attribute-24)
nmod:between(matches-20, values-25)
cc(values-25, and-26)
amod(sentences-28, corresponding-27)
conj:and(values-25, sentences-28)
mark(construct-30, to-29)
advcl:to(using-18, construct-30)
compound(data-32, training-31)
dobj(construct-30, data-32)

root(ROOT-0, using-18)
compound(matches-20, heuristic-19)
dobj(using-18, matches-20)
case(values-25, between-21)
compound(values-25, Wikipedia-22)
compound(values-25, infobox-23)
compound(values-25, attribute-24)
nmod:between(matches-20, values-25)
cc(values-25, and-26)
amod(sentences-28, corresponding-27)
conj:and(values-25, sentences-28)
mark(construct-30, to-29)
advcl:to(using-18, construct-30)
compound(data-32, training-31)
dobj(construct-30, data-32)

root(ROOT-0, construct-30)
mark(construct-30, to-29)
compound(data-32, training-31)
dobj(construct-30, data-32)


Sentence #6: Like TextRunner, WOE's extractor eschews lexicalized features and handles an unbounded set of semantic relations.
root(ROOT-0, eschews-7)
case(TextRunner-2, Like-1)
nmod:like(eschews-7, TextRunner-2)
punct(eschews-7, ,-3)
nmod:poss(extractor-6, WOE-4)
case(WOE-4, 's-5)
nsubj(eschews-7, extractor-6)
nsubj(handles-11, extractor-6)
amod(features-9, lexicalized-8)
dobj(eschews-7, features-9)
cc(eschews-7, and-10)
conj:and(eschews-7, handles-11)
det(set-14, an-12)
amod(set-14, unbounded-13)
dobj(handles-11, set-14)
case(relations-17, of-15)
amod(relations-17, semantic-16)
nmod:of(set-14, relations-17)
punct(eschews-7, .-18)

root(ROOT-0, eschews-7)
case(TextRunner-2, Like-1)
nmod:like(eschews-7, TextRunner-2)
nmod:poss(extractor-6, WOE-4)
case(WOE-4, 's-5)
nsubj(eschews-7, extractor-6)
amod(features-9, lexicalized-8)
dobj(eschews-7, features-9)
cc(eschews-7, and-10)
conj:and(eschews-7, handles-11)
det(set-14, an-12)
amod(set-14, unbounded-13)
dobj(handles-11, set-14)
case(relations-17, of-15)
amod(relations-17, semantic-16)
nmod:of(set-14, relations-17)

root(ROOT-0, handles-11)
nmod:poss(extractor-6, WOE-4)
case(WOE-4, 's-5)
nsubj(handles-11, extractor-6)
det(set-14, an-12)
amod(set-14, unbounded-13)
dobj(handles-11, set-14)
case(relations-17, of-15)
amod(relations-17, semantic-16)
nmod:of(set-14, relations-17)


Sentence #7: WOE can operate in two modes: when restricted to POS tag features, it runs as quickly as TextRunner, but when set to use dependency-parse features its precision and recall rise even higher.
root(ROOT-0, operate-3)
nsubj(operate-3, WOE-1)
aux(operate-3, can-2)
case(modes-6, in-4)
nummod(modes-6, two-5)
nmod:in(operate-3, modes-6)
punct(modes-6, :-7)
advmod(restricted-9, when-8)
advcl(runs-16, restricted-9)
case(features-13, to-10)
compound(features-13, POS-11)
compound(features-13, tag-12)
nmod:to(restricted-9, features-13)
punct(runs-16, ,-14)
nsubj(runs-16, it-15)
nsubj(set-24, it-15)
nsubj:xsubj(use-26, it-15)
dep(modes-6, runs-16)
advmod(quickly-18, as-17)
advmod(runs-16, quickly-18)
case(TextRunner-20, as-19)
nmod:as(quickly-18, TextRunner-20)
punct(runs-16, ,-21)
cc(runs-16, but-22)
advmod(set-24, when-23)
dep(modes-6, set-24)
conj:but(runs-16, set-24)
mark(use-26, to-25)
xcomp(set-24, use-26)
amod(features-28, dependency-parse-27)
dobj(use-26, features-28)
nmod:poss(precision-30, its-29)
nsubj(rise-33, precision-30)
cc(precision-30, and-31)
conj:and(precision-30, recall-32)
nsubj(rise-33, recall-32)
acl:relcl(features-28, rise-33)
advmod(higher-35, even-34)
advmod(rise-33, higher-35)
punct(operate-3, .-36)

root(ROOT-0, operate-3)
nsubj(operate-3, WOE-1)
aux(operate-3, can-2)
case(modes-6, in-4)
nummod(modes-6, two-5)
nmod:in(operate-3, modes-6)
advmod(restricted-9, when-8)
advcl(runs-16, restricted-9)
case(features-13, to-10)
compound(features-13, POS-11)
compound(features-13, tag-12)
nmod:to(restricted-9, features-13)
nsubj(runs-16, it-15)
dep(modes-6, runs-16)
advmod(quickly-18, as-17)
advmod(runs-16, quickly-18)
case(TextRunner-20, as-19)
nmod:as(quickly-18, TextRunner-20)
cc(runs-16, but-22)
advmod(set-24, when-23)
conj:but(runs-16, set-24)
mark(use-26, to-25)
xcomp(set-24, use-26)
amod(features-28, dependency-parse-27)
dobj(use-26, features-28)
nmod:poss(precision-30, its-29)
nsubj(rise-33, precision-30)
cc(precision-30, and-31)
nsubj(rise-33, recall-32)
acl:relcl(features-28, rise-33)
advmod(higher-35, even-34)
advmod(rise-33, higher-35)

root(ROOT-0, set-24)
nsubj(set-24, it-15)
advmod(set-24, when-23)
mark(use-26, to-25)
xcomp(set-24, use-26)
amod(features-28, dependency-parse-27)
dobj(use-26, features-28)
nmod:poss(precision-30, its-29)
nsubj(rise-33, precision-30)
cc(precision-30, and-31)
nsubj(rise-33, recall-32)
acl:relcl(features-28, rise-33)
advmod(higher-35, even-34)
advmod(rise-33, higher-35)

root(ROOT-0, restricted-9)
advmod(restricted-9, when-8)
case(features-13, to-10)
compound(features-13, POS-11)
compound(features-13, tag-12)
nmod:to(restricted-9, features-13)

root(ROOT-0, use-26)
nsubj:xsubj(use-26, it-15)
amod(features-28, dependency-parse-27)
dobj(use-26, features-28)
nmod:poss(precision-30, its-29)
nsubj(rise-33, precision-30)
cc(precision-30, and-31)
nsubj(rise-33, recall-32)
acl:relcl(features-28, rise-33)
advmod(higher-35, even-34)
advmod(rise-33, higher-35)

root(ROOT-0, rise-33)
nmod:poss(precision-30, its-29)
nsubj(rise-33, precision-30)
cc(precision-30, and-31)
nsubj(rise-33, recall-32)
advmod(higher-35, even-34)
advmod(rise-33, higher-35)


--------------------File:./data/acl2015.txt----------------

Sentence #1: Relation triples produced by open domain information extraction (open IE) systems are useful for question answering, inference, and other IE tasks.
root(ROOT-0, triples-2)
compound(triples-2, Relation-1)
acl(triples-2, produced-3)
case(extraction-8, by-4)
amod(extraction-8, open-5)
compound(extraction-8, domain-6)
compound(extraction-8, information-7)
nmod:by(useful-15, extraction-8)
punct(systems-13, -LRB--9)
amod(systems-13, open-10)
compound(systems-13, IE-11)
punct(systems-13, -RRB--12)
nsubj(useful-15, systems-13)
cop(useful-15, are-14)
ccomp(produced-3, useful-15)
case(answering-18, for-16)
compound(answering-18, question-17)
nmod:for(useful-15, answering-18)
punct(answering-18, ,-19)
nmod:for(useful-15, inference-20)
conj:and(answering-18, inference-20)
punct(answering-18, ,-21)
cc(answering-18, and-22)
amod(tasks-25, other-23)
amod(tasks-25, IE-24)
nmod:for(useful-15, tasks-25)
conj:and(answering-18, tasks-25)
punct(triples-2, .-26)

root(ROOT-0, triples-2)
compound(triples-2, Relation-1)
acl(triples-2, produced-3)
case(extraction-8, by-4)
amod(extraction-8, open-5)
compound(extraction-8, domain-6)
compound(extraction-8, information-7)
nmod:by(useful-15, extraction-8)
amod(systems-13, open-10)
compound(systems-13, IE-11)
nsubj(useful-15, systems-13)
cop(useful-15, are-14)
ccomp(produced-3, useful-15)
case(answering-18, for-16)
compound(answering-18, question-17)
nmod:for(useful-15, answering-18)
conj:and(answering-18, inference-20)
cc(answering-18, and-22)
amod(tasks-25, other-23)
amod(tasks-25, IE-24)
conj:and(answering-18, tasks-25)

root(ROOT-0, useful-15)
case(extraction-8, by-4)
amod(extraction-8, open-5)
compound(extraction-8, domain-6)
compound(extraction-8, information-7)
nmod:by(useful-15, extraction-8)
amod(systems-13, open-10)
compound(systems-13, IE-11)
nsubj(useful-15, systems-13)
cop(useful-15, are-14)
case(answering-18, for-16)
compound(answering-18, question-17)
nmod:for(useful-15, answering-18)
conj:and(answering-18, inference-20)
cc(answering-18, and-22)
amod(tasks-25, other-23)
amod(tasks-25, IE-24)
conj:and(answering-18, tasks-25)


Sentence #2: Traditionally these are extracted using a large set of pat-terns; however, this approach is brittle on out-of-domain text and long-range dependencies, and gives no insight into the sub-structure of the arguments.
root(ROOT-0, extracted-4)
advmod(extracted-4, Traditionally-1)
nsubjpass(extracted-4, these-2)
auxpass(extracted-4, are-3)
xcomp(extracted-4, using-5)
det(set-8, a-6)
amod(set-8, large-7)
dobj(using-5, set-8)
case(pat-terns-10, of-9)
nmod:of(set-8, pat-terns-10)
punct(extracted-4, ;-11)
advmod(brittle-17, however-12)
punct(brittle-17, ,-13)
det(approach-15, this-14)
nsubj(brittle-17, approach-15)
nsubj(gives-26, approach-15)
cop(brittle-17, is-16)
parataxis(extracted-4, brittle-17)
case(text-20, on-18)
amod(text-20, out-of-domain-19)
nmod:on(brittle-17, text-20)
cc(text-20, and-21)
amod(dependencies-23, long-range-22)
nmod:on(brittle-17, dependencies-23)
conj:and(text-20, dependencies-23)
punct(brittle-17, ,-24)
cc(brittle-17, and-25)
parataxis(extracted-4, gives-26)
conj:and(brittle-17, gives-26)
neg(insight-28, no-27)
dobj(gives-26, insight-28)
case(sub-structure-31, into-29)
det(sub-structure-31, the-30)
nmod:into(insight-28, sub-structure-31)
case(arguments-34, of-32)
det(arguments-34, the-33)
nmod:of(sub-structure-31, arguments-34)
punct(extracted-4, .-35)

root(ROOT-0, extracted-4)
advmod(extracted-4, Traditionally-1)
nsubjpass(extracted-4, these-2)
auxpass(extracted-4, are-3)
xcomp(extracted-4, using-5)
det(set-8, a-6)
amod(set-8, large-7)
dobj(using-5, set-8)
case(pat-terns-10, of-9)
nmod:of(set-8, pat-terns-10)
advmod(brittle-17, however-12)
det(approach-15, this-14)
nsubj(brittle-17, approach-15)
cop(brittle-17, is-16)
parataxis(extracted-4, brittle-17)
case(text-20, on-18)
amod(text-20, out-of-domain-19)
nmod:on(brittle-17, text-20)
cc(text-20, and-21)
amod(dependencies-23, long-range-22)
conj:and(text-20, dependencies-23)
cc(brittle-17, and-25)
conj:and(brittle-17, gives-26)
neg(insight-28, no-27)
dobj(gives-26, insight-28)
case(sub-structure-31, into-29)
det(sub-structure-31, the-30)
nmod:into(insight-28, sub-structure-31)
case(arguments-34, of-32)
det(arguments-34, the-33)
nmod:of(sub-structure-31, arguments-34)

root(ROOT-0, using-5)
nsubj(using-5, these-2)
det(set-8, a-6)
amod(set-8, large-7)
dobj(using-5, set-8)
case(pat-terns-10, of-9)
nmod:of(set-8, pat-terns-10)

root(ROOT-0, brittle-17)
advmod(brittle-17, however-12)
det(approach-15, this-14)
nsubj(brittle-17, approach-15)
cop(brittle-17, is-16)
case(text-20, on-18)
amod(text-20, out-of-domain-19)
nmod:on(brittle-17, text-20)
cc(text-20, and-21)
amod(dependencies-23, long-range-22)
conj:and(text-20, dependencies-23)
cc(brittle-17, and-25)
conj:and(brittle-17, gives-26)
neg(insight-28, no-27)
dobj(gives-26, insight-28)
case(sub-structure-31, into-29)
det(sub-structure-31, the-30)
nmod:into(insight-28, sub-structure-31)
case(arguments-34, of-32)
det(arguments-34, the-33)
nmod:of(sub-structure-31, arguments-34)

root(ROOT-0, gives-26)
det(approach-15, this-14)
nsubj(gives-26, approach-15)
neg(insight-28, no-27)
dobj(gives-26, insight-28)
case(sub-structure-31, into-29)
det(sub-structure-31, the-30)
nmod:into(insight-28, sub-structure-31)
case(arguments-34, of-32)
det(arguments-34, the-33)
nmod:of(sub-structure-31, arguments-34)

root(ROOT-0, set-8)
nsubjpass(set-8, using-5)
det(set-8, a-6)
amod(set-8, large-7)
case(pat-terns-10, of-9)
nmod:of(set-8, pat-terns-10)


Sentence #3: We replace this large pattern set with a few patterns for canonically structured sentences, and shift the focus to a classifier which learns to extract self-contained clauses from longer sentences.
root(ROOT-0, replace-2)
nsubj(replace-2, We-1)
nsubj(shift-17, We-1)
det(pattern-5, this-3)
amod(pattern-5, large-4)
dobj(replace-2, pattern-5)
acl(pattern-5, set-6)
case(patterns-10, with-7)
det(patterns-10, a-8)
amod(patterns-10, few-9)
nmod:with(set-6, patterns-10)
case(sentences-14, for-11)
advmod(structured-13, canonically-12)
amod(sentences-14, structured-13)
nmod:for(patterns-10, sentences-14)
punct(replace-2, ,-15)
cc(replace-2, and-16)
conj:and(replace-2, shift-17)
det(focus-19, the-18)
dobj(shift-17, focus-19)
case(classifier-22, to-20)
det(classifier-22, a-21)
nmod:to(shift-17, classifier-22)
nsubj(learns-24, classifier-22)
nsubj:xsubj(extract-26, classifier-22)
ref(classifier-22, which-23)
acl:relcl(classifier-22, learns-24)
mark(extract-26, to-25)
xcomp(learns-24, extract-26)
amod(clauses-28, self-contained-27)
dobj(extract-26, clauses-28)
case(sentences-31, from-29)
amod(sentences-31, longer-30)
nmod:from(extract-26, sentences-31)
punct(replace-2, .-32)

root(ROOT-0, replace-2)
nsubj(replace-2, We-1)
det(pattern-5, this-3)
amod(pattern-5, large-4)
dobj(replace-2, pattern-5)
acl(pattern-5, set-6)
case(patterns-10, with-7)
det(patterns-10, a-8)
amod(patterns-10, few-9)
nmod:with(set-6, patterns-10)
case(sentences-14, for-11)
advmod(structured-13, canonically-12)
amod(sentences-14, structured-13)
nmod:for(patterns-10, sentences-14)
cc(replace-2, and-16)
conj:and(replace-2, shift-17)
det(focus-19, the-18)
dobj(shift-17, focus-19)
case(classifier-22, to-20)
det(classifier-22, a-21)
nmod:to(shift-17, classifier-22)
ref(classifier-22, which-23)
acl:relcl(classifier-22, learns-24)
mark(extract-26, to-25)
xcomp(learns-24, extract-26)
amod(clauses-28, self-contained-27)
dobj(extract-26, clauses-28)
case(sentences-31, from-29)
amod(sentences-31, longer-30)
nmod:from(extract-26, sentences-31)

root(ROOT-0, shift-17)
nsubj(shift-17, We-1)
det(focus-19, the-18)
dobj(shift-17, focus-19)
case(classifier-22, to-20)
det(classifier-22, a-21)
nmod:to(shift-17, classifier-22)
ref(classifier-22, which-23)
acl:relcl(classifier-22, learns-24)
mark(extract-26, to-25)
xcomp(learns-24, extract-26)
amod(clauses-28, self-contained-27)
dobj(extract-26, clauses-28)
case(sentences-31, from-29)
amod(sentences-31, longer-30)
nmod:from(extract-26, sentences-31)

root(ROOT-0, learns-24)
case(classifier-22, to-20)
det(classifier-22, a-21)
nsubj(learns-24, classifier-22)
ref(classifier-22, which-23)
mark(extract-26, to-25)
xcomp(learns-24, extract-26)
amod(clauses-28, self-contained-27)
dobj(extract-26, clauses-28)
case(sentences-31, from-29)
amod(sentences-31, longer-30)
nmod:from(extract-26, sentences-31)

root(ROOT-0, extract-26)
case(classifier-22, to-20)
det(classifier-22, a-21)
nsubj:xsubj(extract-26, classifier-22)
ref(classifier-22, which-23)
acl:relcl(classifier-22, learns-24)
amod(clauses-28, self-contained-27)
dobj(extract-26, clauses-28)
case(sentences-31, from-29)
amod(sentences-31, longer-30)
nmod:from(extract-26, sentences-31)

root(ROOT-0, patterns-10)
nsubjpass(patterns-10, set-6)
case(patterns-10, with-7)
det(patterns-10, a-8)
amod(patterns-10, few-9)
case(sentences-14, for-11)
advmod(structured-13, canonically-12)
amod(sentences-14, structured-13)
nmod:for(patterns-10, sentences-14)


Sentence #4: We then run natural logic inference over these short clauses to determine the maximally specific arguments for each candidate triple.
root(ROOT-0, run-3)
nsubj(run-3, We-1)
advmod(run-3, then-2)
amod(inference-6, natural-4)
compound(inference-6, logic-5)
dobj(run-3, inference-6)
case(clauses-10, over-7)
det(clauses-10, these-8)
amod(clauses-10, short-9)
nmod:over(run-3, clauses-10)
mark(determine-12, to-11)
advcl:to(run-3, determine-12)
det(arguments-16, the-13)
advmod(specific-15, maximally-14)
amod(arguments-16, specific-15)
dobj(determine-12, arguments-16)
case(candidate-19, for-17)
det(candidate-19, each-18)
nmod:for(arguments-16, candidate-19)
advmod(candidate-19, triple-20)
punct(run-3, .-21)

root(ROOT-0, run-3)
nsubj(run-3, We-1)
advmod(run-3, then-2)
amod(inference-6, natural-4)
compound(inference-6, logic-5)
dobj(run-3, inference-6)
case(clauses-10, over-7)
det(clauses-10, these-8)
amod(clauses-10, short-9)
nmod:over(run-3, clauses-10)
mark(determine-12, to-11)
advcl:to(run-3, determine-12)
det(arguments-16, the-13)
advmod(specific-15, maximally-14)
amod(arguments-16, specific-15)
dobj(determine-12, arguments-16)
case(candidate-19, for-17)
det(candidate-19, each-18)
nmod:for(arguments-16, candidate-19)
advmod(candidate-19, triple-20)

root(ROOT-0, determine-12)
nsubj(determine-12, We-1)
det(arguments-16, the-13)
advmod(specific-15, maximally-14)
amod(arguments-16, specific-15)
dobj(determine-12, arguments-16)
case(candidate-19, for-17)
det(candidate-19, each-18)
nmod:for(arguments-16, candidate-19)
advmod(candidate-19, triple-20)


Sentence #5: We show that our approach outperforms a state-of-the-art open IE system on the end-to-end TAC-KBP 2013 Slot Filling task.
root(ROOT-0, show-2)
nsubj(show-2, We-1)
mark(outperforms-6, that-3)
nmod:poss(approach-5, our-4)
nsubj(outperforms-6, approach-5)
ccomp(show-2, outperforms-6)
det(system-11, a-7)
amod(system-11, state-of-the-art-8)
amod(system-11, open-9)
amod(system-11, IE-10)
dobj(outperforms-6, system-11)
case(task-19, on-12)
det(task-19, the-13)
amod(task-19, end-to-end-14)
compound(task-19, TAC-KBP-15)
nummod(task-19, 2013-16)
compound(task-19, Slot-17)
amod(task-19, Filling-18)
nmod:on(system-11, task-19)
punct(show-2, .-20)

root(ROOT-0, show-2)
nsubj(show-2, We-1)
mark(outperforms-6, that-3)
nmod:poss(approach-5, our-4)
nsubj(outperforms-6, approach-5)
ccomp(show-2, outperforms-6)
det(system-11, a-7)
amod(system-11, state-of-the-art-8)
amod(system-11, open-9)
amod(system-11, IE-10)
dobj(outperforms-6, system-11)
case(task-19, on-12)
det(task-19, the-13)
amod(task-19, end-to-end-14)
compound(task-19, TAC-KBP-15)
nummod(task-19, 2013-16)
compound(task-19, Slot-17)
amod(task-19, Filling-18)
nmod:on(system-11, task-19)

root(ROOT-0, outperforms-6)
nmod:poss(approach-5, our-4)
nsubj(outperforms-6, approach-5)
det(system-11, a-7)
amod(system-11, state-of-the-art-8)
amod(system-11, open-9)
amod(system-11, IE-10)
dobj(outperforms-6, system-11)
case(task-19, on-12)
det(task-19, the-13)
amod(task-19, end-to-end-14)
compound(task-19, TAC-KBP-15)
nummod(task-19, 2013-16)
compound(task-19, Slot-17)
amod(task-19, Filling-18)
nmod:on(system-11, task-19)

root(ROOT-0, system-11)
nmod:poss(approach-5, our-4)
nsubj(system-11, approach-5)
det(system-11, a-7)
amod(system-11, state-of-the-art-8)
amod(system-11, open-9)
amod(system-11, IE-10)
case(task-19, on-12)
det(task-19, the-13)
amod(task-19, end-to-end-14)
compound(task-19, TAC-KBP-15)
nummod(task-19, 2013-16)
compound(task-19, Slot-17)
amod(task-19, Filling-18)
nmod:on(system-11, task-19)


--------------------File:./data/kcap2011.txt----------------

Sentence #1: The Web contains a massive amount of information embedded in text and obtaining information from Web text is a major research challenge.
root(ROOT-0, contains-3)
det(Web-2, The-1)
nsubj(contains-3, Web-2)
det(amount-6, a-4)
amod(amount-6, massive-5)
dobj(contains-3, amount-6)
case(information-8, of-7)
nmod:of(amount-6, information-8)
amod(amount-6, embedded-9)
case(text-11, in-10)
nmod:in(embedded-9, text-11)
cc(contains-3, and-12)
csubj(challenge-22, obtaining-13)
dobj(obtaining-13, information-14)
case(text-17, from-15)
compound(text-17, Web-16)
nmod:from(information-14, text-17)
cop(challenge-22, is-18)
det(challenge-22, a-19)
amod(challenge-22, major-20)
compound(challenge-22, research-21)
conj:and(contains-3, challenge-22)
punct(contains-3, .-23)

root(ROOT-0, contains-3)
det(Web-2, The-1)
nsubj(contains-3, Web-2)
det(amount-6, a-4)
amod(amount-6, massive-5)
dobj(contains-3, amount-6)
case(information-8, of-7)
nmod:of(amount-6, information-8)
amod(amount-6, embedded-9)
case(text-11, in-10)
nmod:in(embedded-9, text-11)
cc(contains-3, and-12)
csubj(challenge-22, obtaining-13)
dobj(obtaining-13, information-14)
case(text-17, from-15)
compound(text-17, Web-16)
nmod:from(information-14, text-17)
cop(challenge-22, is-18)
det(challenge-22, a-19)
amod(challenge-22, major-20)
compound(challenge-22, research-21)
conj:and(contains-3, challenge-22)

root(ROOT-0, challenge-22)
csubj(challenge-22, obtaining-13)
dobj(obtaining-13, information-14)
case(text-17, from-15)
compound(text-17, Web-16)
nmod:from(information-14, text-17)
cop(challenge-22, is-18)
det(challenge-22, a-19)
amod(challenge-22, major-20)
compound(challenge-22, research-21)

root(ROOT-0, obtaining-13)
dobj(obtaining-13, information-14)
case(text-17, from-15)
compound(text-17, Web-16)
nmod:from(information-14, text-17)

root(ROOT-0, information-14)
nsubjpass(information-14, obtaining-13)
case(text-17, from-15)
compound(text-17, Web-16)
nmod:from(information-14, text-17)


Sentence #2: One research focus is Open Information Extraction aimed at developing relation-independent information extraction.
root(ROOT-0, aimed-8)
nummod(focus-3, One-1)
compound(focus-3, research-2)
nsubjpass(aimed-8, focus-3)
auxpass(aimed-8, is-4)
compound(Extraction-7, Open-5)
compound(Extraction-7, Information-6)
nsubjpass(aimed-8, Extraction-7)
mark(developing-10, at-9)
advcl:at(aimed-8, developing-10)
amod(extraction-13, relation-independent-11)
compound(extraction-13, information-12)
dobj(developing-10, extraction-13)
punct(aimed-8, .-14)

root(ROOT-0, aimed-8)
nummod(focus-3, One-1)
compound(focus-3, research-2)
nsubjpass(aimed-8, focus-3)
auxpass(aimed-8, is-4)
compound(Extraction-7, Open-5)
compound(Extraction-7, Information-6)
nsubjpass(aimed-8, Extraction-7)
mark(developing-10, at-9)
advcl:at(aimed-8, developing-10)
amod(extraction-13, relation-independent-11)
compound(extraction-13, information-12)
dobj(developing-10, extraction-13)

root(ROOT-0, developing-10)
compound(Extraction-7, Open-5)
compound(Extraction-7, Information-6)
nsubj(developing-10, Extraction-7)
amod(extraction-13, relation-independent-11)
compound(extraction-13, information-12)
dobj(developing-10, extraction-13)


Sentence #3: Open Information Extraction (OIE) systems seek to extract all potential relations from the text rather than extracting a few pre-defined relations.
root(ROOT-0, seek-8)
compound(Extraction-3, Open-1)
compound(Extraction-3, Information-2)
compound(systems-7, Extraction-3)
punct(OIE-5, -LRB--4)
appos(Extraction-3, OIE-5)
punct(OIE-5, -RRB--6)
nsubj(seek-8, systems-7)
nsubj:xsubj(extract-10, systems-7)
mark(extract-10, to-9)
xcomp(seek-8, extract-10)
det(relations-13, all-11)
amod(relations-13, potential-12)
dobj(extract-10, relations-13)
case(text-16, from-14)
det(text-16, the-15)
nmod:from(relations-13, text-16)
cc(extract-10, rather-17)
mwe(rather-17, than-18)
xcomp(seek-8, extracting-19)
conj:negcc(extract-10, extracting-19)
det(relations-23, a-20)
amod(relations-23, few-21)
amod(relations-23, pre-defined-22)
dobj(extracting-19, relations-23)
punct(seek-8, .-24)

root(ROOT-0, seek-8)
compound(Extraction-3, Open-1)
compound(Extraction-3, Information-2)
compound(systems-7, Extraction-3)
appos(Extraction-3, OIE-5)
nsubj(seek-8, systems-7)
mark(extract-10, to-9)
xcomp(seek-8, extract-10)
det(relations-13, all-11)
amod(relations-13, potential-12)
dobj(extract-10, relations-13)
case(text-16, from-14)
det(text-16, the-15)
nmod:from(relations-13, text-16)
cc(extract-10, rather-17)
mwe(rather-17, than-18)
conj:negcc(extract-10, extracting-19)
det(relations-23, a-20)
amod(relations-23, few-21)
amod(relations-23, pre-defined-22)
dobj(extracting-19, relations-23)

root(ROOT-0, extract-10)
compound(Extraction-3, Open-1)
compound(Extraction-3, Information-2)
compound(systems-7, Extraction-3)
appos(Extraction-3, OIE-5)
nsubj(extract-10, systems-7)
det(relations-13, all-11)
amod(relations-13, potential-12)
dobj(extract-10, relations-13)
case(text-16, from-14)
det(text-16, the-15)
nmod:from(relations-13, text-16)
cc(extract-10, rather-17)
mwe(rather-17, than-18)
conj:negcc(extract-10, extracting-19)
det(relations-23, a-20)
amod(relations-23, few-21)
amod(relations-23, pre-defined-22)
dobj(extracting-19, relations-23)

root(ROOT-0, extracting-19)
det(relations-13, all-11)
amod(relations-13, potential-12)
nsubj(extracting-19, relations-13)
case(text-16, from-14)
det(text-16, the-15)
nmod:from(relations-13, text-16)
det(relations-23, a-20)
amod(relations-23, few-21)
amod(relations-23, pre-defined-22)
dobj(extracting-19, relations-23)


Sentence #4: Existing OIE systems such as TEXTRUNNER usually take a machine learning based approach which requires large volumes of training data.
root(ROOT-0, take-8)
amod(systems-3, Existing-1)
compound(systems-3, OIE-2)
nsubj(take-8, systems-3)
case(TEXTRUNNER-6, such-4)
mwe(such-4, as-5)
nmod:such_as(systems-3, TEXTRUNNER-6)
advmod(take-8, usually-7)
det(learning-11, a-9)
compound(learning-11, machine-10)
nsubj(approach-13, learning-11)
amod(approach-13, based-12)
ccomp(take-8, approach-13)
nsubj(requires-15, approach-13)
ref(approach-13, which-14)
acl:relcl(approach-13, requires-15)
amod(volumes-17, large-16)
dobj(requires-15, volumes-17)
case(data-20, of-18)
compound(data-20, training-19)
nmod:of(volumes-17, data-20)
punct(take-8, .-21)

root(ROOT-0, take-8)
amod(systems-3, Existing-1)
compound(systems-3, OIE-2)
nsubj(take-8, systems-3)
case(TEXTRUNNER-6, such-4)
mwe(such-4, as-5)
nmod:such_as(systems-3, TEXTRUNNER-6)
advmod(take-8, usually-7)
det(learning-11, a-9)
compound(learning-11, machine-10)
nsubj(approach-13, learning-11)
amod(approach-13, based-12)
ccomp(take-8, approach-13)
ref(approach-13, which-14)
acl:relcl(approach-13, requires-15)
amod(volumes-17, large-16)
dobj(requires-15, volumes-17)
case(data-20, of-18)
compound(data-20, training-19)
nmod:of(volumes-17, data-20)

root(ROOT-0, approach-13)
det(learning-11, a-9)
compound(learning-11, machine-10)
nsubj(approach-13, learning-11)
amod(approach-13, based-12)
ref(approach-13, which-14)
acl:relcl(approach-13, requires-15)
amod(volumes-17, large-16)
dobj(requires-15, volumes-17)
case(data-20, of-18)
compound(data-20, training-19)
nmod:of(volumes-17, data-20)

root(ROOT-0, requires-15)
det(learning-11, a-9)
compound(learning-11, machine-10)
nsubj(approach-13, learning-11)
amod(approach-13, based-12)
nsubj(requires-15, approach-13)
ref(approach-13, which-14)
amod(volumes-17, large-16)
dobj(requires-15, volumes-17)
case(data-20, of-18)
compound(data-20, training-19)
nmod:of(volumes-17, data-20)


Sentence #5: This paper presents a Ripple-Down Rules Open Information Extraction system based on processing example cases and manually adding rules when needed.
root(ROOT-0, presents-3)
det(paper-2, This-1)
nsubj(presents-3, paper-2)
nsubj(adding-18, paper-2)
det(system-10, a-4)
compound(system-10, Ripple-Down-5)
compound(system-10, Rules-6)
compound(system-10, Open-7)
compound(system-10, Information-8)
compound(system-10, Extraction-9)
dobj(presents-3, system-10)
case(cases-15, based-11)
case(cases-15, on-12)
compound(cases-15, processing-13)
compound(cases-15, example-14)
nmod:based(system-10, cases-15)
cc(presents-3, and-16)
advmod(adding-18, manually-17)
conj:and(presents-3, adding-18)
dobj(adding-18, rules-19)
advmod(needed-21, when-20)
advcl(adding-18, needed-21)
punct(presents-3, .-22)

root(ROOT-0, presents-3)
det(paper-2, This-1)
nsubj(presents-3, paper-2)
det(system-10, a-4)
compound(system-10, Ripple-Down-5)
compound(system-10, Rules-6)
compound(system-10, Open-7)
compound(system-10, Information-8)
compound(system-10, Extraction-9)
dobj(presents-3, system-10)
case(cases-15, based-11)
mwe(based-11, on-12)
compound(cases-15, processing-13)
compound(cases-15, example-14)
nmod:based_on(system-10, cases-15)
cc(presents-3, and-16)
advmod(adding-18, manually-17)
conj:and(presents-3, adding-18)
dobj(adding-18, rules-19)
advmod(needed-21, when-20)
advcl(adding-18, needed-21)

root(ROOT-0, adding-18)
det(paper-2, This-1)
nsubj(adding-18, paper-2)
advmod(adding-18, manually-17)
dobj(adding-18, rules-19)
advmod(needed-21, when-20)
advcl(adding-18, needed-21)

root(ROOT-0, needed-21)
advmod(needed-21, when-20)


Sentence #6: The key advantages of this approach are that it can handle the freer writing style that occurs in Web documents and can correct errors introduced by natural language pre-processing tools, whereas systems like TEXTRUNNER depend on the quality of the entity-tagging preprocessing in the training data.
root(ROOT-0, are-7)
det(advantages-3, The-1)
amod(advantages-3, key-2)
nsubj(are-7, advantages-3)
case(approach-6, of-4)
det(approach-6, this-5)
nmod:of(advantages-3, approach-6)
mark(handle-11, that-8)
nsubj(handle-11, it-9)
nsubj(correct-23, it-9)
aux(handle-11, can-10)
ccomp(are-7, handle-11)
det(style-15, the-12)
amod(style-15, freer-13)
compound(style-15, writing-14)
dobj(handle-11, style-15)
nsubj(occurs-17, style-15)
ref(style-15, that-16)
acl:relcl(style-15, occurs-17)
case(documents-20, in-18)
compound(documents-20, Web-19)
nmod:in(occurs-17, documents-20)
cc(handle-11, and-21)
aux(correct-23, can-22)
ccomp(are-7, correct-23)
conj:and(handle-11, correct-23)
dobj(correct-23, errors-24)
acl(errors-24, introduced-25)
case(tools-30, by-26)
amod(tools-30, natural-27)
compound(tools-30, language-28)
amod(tools-30, pre-processing-29)
nmod:by(introduced-25, tools-30)
punct(are-7, ,-31)
dep(are-7, whereas-32)
nsubj(depend-36, systems-33)
case(TEXTRUNNER-35, like-34)
nmod:like(systems-33, TEXTRUNNER-35)
parataxis(are-7, depend-36)
case(quality-39, on-37)
det(quality-39, the-38)
nmod:on(depend-36, quality-39)
case(preprocessing-43, of-40)
det(preprocessing-43, the-41)
amod(preprocessing-43, entity-tagging-42)
nmod:of(quality-39, preprocessing-43)
case(data-47, in-44)
det(data-47, the-45)
compound(data-47, training-46)
nmod:in(preprocessing-43, data-47)
punct(are-7, .-48)

root(ROOT-0, are-7)
det(advantages-3, The-1)
amod(advantages-3, key-2)
nsubj(are-7, advantages-3)
case(approach-6, of-4)
det(approach-6, this-5)
nmod:of(advantages-3, approach-6)
mark(handle-11, that-8)
nsubj(handle-11, it-9)
aux(handle-11, can-10)
ccomp(are-7, handle-11)
det(style-15, the-12)
amod(style-15, freer-13)
compound(style-15, writing-14)
dobj(handle-11, style-15)
ref(style-15, that-16)
acl:relcl(style-15, occurs-17)
case(documents-20, in-18)
compound(documents-20, Web-19)
nmod:in(occurs-17, documents-20)
cc(handle-11, and-21)
aux(correct-23, can-22)
conj:and(handle-11, correct-23)
dobj(correct-23, errors-24)
acl(errors-24, introduced-25)
case(tools-30, by-26)
amod(tools-30, natural-27)
compound(tools-30, language-28)
amod(tools-30, pre-processing-29)
nmod:by(introduced-25, tools-30)
dep(are-7, whereas-32)
nsubj(depend-36, systems-33)
case(TEXTRUNNER-35, like-34)
nmod:like(systems-33, TEXTRUNNER-35)
parataxis(are-7, depend-36)
case(quality-39, on-37)
det(quality-39, the-38)
nmod:on(depend-36, quality-39)
case(preprocessing-43, of-40)
det(preprocessing-43, the-41)
amod(preprocessing-43, entity-tagging-42)
nmod:of(quality-39, preprocessing-43)
case(data-47, in-44)
det(data-47, the-45)
compound(data-47, training-46)
nmod:in(preprocessing-43, data-47)

root(ROOT-0, depend-36)
nsubj(depend-36, systems-33)
case(TEXTRUNNER-35, like-34)
nmod:like(systems-33, TEXTRUNNER-35)
case(quality-39, on-37)
det(quality-39, the-38)
nmod:on(depend-36, quality-39)
case(preprocessing-43, of-40)
det(preprocessing-43, the-41)
amod(preprocessing-43, entity-tagging-42)
nmod:of(quality-39, preprocessing-43)
case(data-47, in-44)
det(data-47, the-45)
compound(data-47, training-46)
nmod:in(preprocessing-43, data-47)

root(ROOT-0, handle-11)
nsubj(handle-11, it-9)
det(style-15, the-12)
amod(style-15, freer-13)
compound(style-15, writing-14)
dobj(handle-11, style-15)
ref(style-15, that-16)
acl:relcl(style-15, occurs-17)
case(documents-20, in-18)
compound(documents-20, Web-19)
nmod:in(occurs-17, documents-20)
cc(handle-11, and-21)
aux(correct-23, can-22)
conj:and(handle-11, correct-23)
dobj(correct-23, errors-24)
acl(errors-24, introduced-25)
case(tools-30, by-26)
amod(tools-30, natural-27)
compound(tools-30, language-28)
amod(tools-30, pre-processing-29)
nmod:by(introduced-25, tools-30)

root(ROOT-0, correct-23)
nsubj(correct-23, it-9)
dobj(correct-23, errors-24)
acl(errors-24, introduced-25)
case(tools-30, by-26)
amod(tools-30, natural-27)
compound(tools-30, language-28)
amod(tools-30, pre-processing-29)
nmod:by(introduced-25, tools-30)

root(ROOT-0, occurs-17)
det(style-15, the-12)
amod(style-15, freer-13)
compound(style-15, writing-14)
nsubj(occurs-17, style-15)
ref(style-15, that-16)
case(documents-20, in-18)
compound(documents-20, Web-19)
nmod:in(occurs-17, documents-20)

root(ROOT-0, introduced-25)
nsubjpass(introduced-25, errors-24)
case(tools-30, by-26)
amod(tools-30, natural-27)
compound(tools-30, language-28)
amod(tools-30, pre-processing-29)
nmod:by(introduced-25, tools-30)

root(ROOT-0, quality-39)
nsubj(quality-39, systems-33)
case(TEXTRUNNER-35, like-34)
nmod:like(systems-33, TEXTRUNNER-35)
case(quality-39, on-37)
det(quality-39, the-38)
case(preprocessing-43, of-40)
det(preprocessing-43, the-41)
amod(preprocessing-43, entity-tagging-42)
nmod:of(quality-39, preprocessing-43)
case(data-47, in-44)
det(data-47, the-45)
compound(data-47, training-46)
nmod:in(preprocessing-43, data-47)


Sentence #7: We evaluated the Ripple-Down Rules approach against the OIE systems, TEXTRUNNER and StatSnowball.
root(ROOT-0, evaluated-2)
nsubj(evaluated-2, We-1)
det(approach-6, the-3)
compound(approach-6, Ripple-Down-4)
compound(approach-6, Rules-5)
dobj(evaluated-2, approach-6)
case(systems-10, against-7)
det(systems-10, the-8)
compound(systems-10, OIE-9)
nmod:against(approach-6, systems-10)
punct(systems-10, ,-11)
nmod:against(approach-6, TEXTRUNNER-12)
conj:and(systems-10, TEXTRUNNER-12)
cc(systems-10, and-13)
nmod:against(approach-6, StatSnowball-14)
conj:and(systems-10, StatSnowball-14)
punct(evaluated-2, .-15)

root(ROOT-0, evaluated-2)
nsubj(evaluated-2, We-1)
det(approach-6, the-3)
compound(approach-6, Ripple-Down-4)
compound(approach-6, Rules-5)
dobj(evaluated-2, approach-6)
case(systems-10, against-7)
det(systems-10, the-8)
compound(systems-10, OIE-9)
nmod:against(approach-6, systems-10)
conj:and(systems-10, TEXTRUNNER-12)
cc(systems-10, and-13)
conj:and(systems-10, StatSnowball-14)


Sentence #8: In these studies the Ripple-Down Rules approach, with minimal low-cost rule addition achieves much higher precision and somewhat improved recall compared to these other Open Information Extraction systems.
root(ROOT-0, achieves-14)
case(studies-3, In-1)
det(studies-3, these-2)
nmod:in(achieves-14, studies-3)
det(approach-7, the-4)
compound(approach-7, Ripple-Down-5)
compound(approach-7, Rules-6)
nsubj(achieves-14, approach-7)
punct(approach-7, ,-8)
case(addition-13, with-9)
amod(addition-13, minimal-10)
amod(addition-13, low-cost-11)
compound(addition-13, rule-12)
nmod:with(approach-7, addition-13)
advmod(higher-16, much-15)
amod(precision-17, higher-16)
dobj(achieves-14, precision-17)
cc(precision-17, and-18)
advmod(improved-20, somewhat-19)
amod(recall-21, improved-20)
dobj(achieves-14, recall-21)
conj:and(precision-17, recall-21)
case(systems-29, compared-22)
case(systems-29, to-23)
det(systems-29, these-24)
amod(systems-29, other-25)
compound(systems-29, Open-26)
compound(systems-29, Information-27)
compound(systems-29, Extraction-28)
advcl:to(achieves-14, systems-29)
punct(achieves-14, .-30)

root(ROOT-0, achieves-14)
case(studies-3, In-1)
det(studies-3, these-2)
nmod:in(achieves-14, studies-3)
det(approach-7, the-4)
compound(approach-7, Ripple-Down-5)
compound(approach-7, Rules-6)
nsubj(achieves-14, approach-7)
case(addition-13, with-9)
amod(addition-13, minimal-10)
amod(addition-13, low-cost-11)
compound(addition-13, rule-12)
nmod:with(approach-7, addition-13)
advmod(higher-16, much-15)
amod(precision-17, higher-16)
dobj(achieves-14, precision-17)
cc(precision-17, and-18)
advmod(improved-20, somewhat-19)
amod(recall-21, improved-20)
dobj(achieves-14, recall-21)
case(systems-29, compared-22)
mwe(compared-22, to-23)
det(systems-29, these-24)
amod(systems-29, other-25)
compound(systems-29, Open-26)
compound(systems-29, Information-27)
compound(systems-29, Extraction-28)
advcl:compared_to(achieves-14, systems-29)

root(ROOT-0, systems-29)
det(approach-7, the-4)
compound(approach-7, Ripple-Down-5)
compound(approach-7, Rules-6)
nsubj(systems-29, approach-7)
case(addition-13, with-9)
amod(addition-13, minimal-10)
amod(addition-13, low-cost-11)
compound(addition-13, rule-12)
nmod:with(approach-7, addition-13)
case(systems-29, compared-22)
mwe(compared-22, to-23)
det(systems-29, these-24)
amod(systems-29, other-25)
compound(systems-29, Open-26)
compound(systems-29, Information-27)
compound(systems-29, Extraction-28)


